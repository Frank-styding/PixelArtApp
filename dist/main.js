(()=>{"use strict";var e={599:(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});const n=s.p+"resources/wasm/render.wasm"},328:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=s(878),a=s(599),r=new n.Wasm("render");r.setFile(a.default),t.default=r},610:function(e,t){var s=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(a,r){function i(e){try{o(n.next(e))}catch(e){r(e)}}function l(e){try{o(n.throw(e))}catch(e){r(e)}}function o(e){var t;e.done?a(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(i,l)}o((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.LoaderWasm=void 0;class n{constructor(){}static loadFile(e,t){return s(this,void 0,void 0,(function*(){if(this.exports[e])return this.exports[e];if(!this.buffers[e]){const s=this.filesPath[e];if(!s)return;const n=yield fetch(s),a=yield n.arrayBuffer();yield this.loadFromBuffer(e,a,t)}return this.exports[e]}))}static loadFromBuffer(e,t,n){return s(this,void 0,void 0,(function*(){if(null!=this.exports[e])return;const{env:s,heap:a}=this.getDefaultEnv(),{instance:r}=yield WebAssembly.instantiate(new Uint8Array(t),{module:{},env:Object.assign(Object.assign({},s),n)});this.heapRegister[e]=a,this.exports[e]=r.exports}))}static getDefaultEnv(){const e=new WebAssembly.Memory({initial:4e3}),t=new Uint8Array(e.buffer);return{env:{memory:e,LOG:(...e)=>{console.log(e.join(" "))},emscripten_resize_heap:e=>{},emscripten_memcpy_big:()=>{},DYNAMICTOP_PTR:4096,abort:function(e){throw new Error("abort "+e)},abortOnCannotGrowMemory:function(e){throw new Error("abortOnCannotGrowMemory "+e)},___cxa_throw:function(e,t,s){console.error("cxa_throw: throwing an exception, "+[e,t,s])},___cxa_allocate_exception:function(e){return console.error("cxa_allocate_exception"+e),!1},___setErrNo:function(e){throw new Error("ErrNo "+e)},_emscripten_get_heap_size:function(){return t.length},_emscripten_resize_heap:function(e){return!1},_emscripten_memcpy_big:function(e,s,n){t.set(t.subarray(s,s+n),e)},_Znam:function(){},__memory_base:0,__table_base:0,table:new WebAssembly.Table({initial:33,maximum:33,element:"anyfunc"})},heap:t}}static getExports(e){return this.exports[e]}static getArrayBuffer(e){return this.buffers[e]}static registerFile(e,t){this.filesPath[e]=t}static registerBuffer(e,t){this.buffers[e]=t}static isLoaded(e){return null!=this.exports[e]}}t.LoaderWasm=n,n.exports={},n.buffers={},n.filesPath={},n.heapRegister={},n.envConfig={},n.defaultConfig={}},878:function(e,t,s){var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(a,r){function i(e){try{o(n.next(e))}catch(e){r(e)}}function l(e){try{o(n.throw(e))}catch(e){r(e)}}function o(e){var t;e.done?a(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(i,l)}o((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Wasm=void 0;const a=s(610),r=s(216);class i{constructor(e){this.name=e}setFile(e){this.filePath=e}load(e={}){return n(this,void 0,void 0,(function*(){const t=a.LoaderWasm.getExports(this.name);if(null==t&&null!=this.filePath)return yield i.loadFile(this.name,this.filePath,e),this.exports=a.LoaderWasm.getExports(this.name),void(this.heap=a.LoaderWasm.heapRegister[this.name]);this.heap=a.LoaderWasm.heapRegister[this.name],this.exports=t}))}callWasm(e,...t){const s=this.exports[e];if(0==t.length)return s();const n=new r.WasmArgs(...t);return n.bind(this),s(...n.getArgs())}static loadFile(e,t,s){return n(this,void 0,void 0,(function*(){a.LoaderWasm.registerFile(e,t),yield a.LoaderWasm.loadFile(e,s)}))}static loadWasmBuffer(e,t,s){return n(this,void 0,void 0,(function*(){a.LoaderWasm.registerBuffer(e,t),yield a.LoaderWasm.loadFromBuffer(e,t,s)}))}}t.Wasm=i},216:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WasmArgs=void 0,t.WasmArgs=class{constructor(...e){this.argsInfo=e,this.buffers=[],this.outBuffers=[]}getClassBuffer(e){switch(e){case"uint8Clamped":return Uint8ClampedArray;case"uint8":return Uint8Array;case"uint16":return Uint16Array;case"uint32":return Uint32Array;case"int8":return Int8Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float32":return Float32Array;case"float64":return Float64Array;default:return}}bind(e){this.buffers=[],this.args=this.argsInfo.map(((t,s)=>{if("object"==typeof t){const s=this.getClassBuffer(t.type),n=e.exports.malloc(s.BYTES_PER_ELEMENT*t.size),a=new s(e.exports.memory.buffer,n,t.size);return void 0!==t.data&&a.set(t.data),this.buffers.push(a),t.out&&this.outBuffers.push(this.buffers.length-1),a.byteOffset}return t}))}getArgs(){return this.args}getOutBuffers(){return this.outBuffers.map((e=>this.buffers[e]))}}},177:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TemplateFunction=void 0;const n=s(924),a=s(121),r=s(623),i=s(543);t.TemplateFunction=function(e,t,s){let l=null;return l=(0,r.funcString)(l,e,t,s),l=(0,a.funcHTML)(l,e,t,s),l=(0,i.funcTemplate)(l,e,t,s),l=(0,n.funcStruct)(l,e,t,s),l}},121:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.funcHTML=void 0;const n=s(748),a=s(177);t.funcHTML=function(e,t,s,r){return null!=e?e:t instanceof HTMLElement?n.Template.templates.has(t)?(0,a.TemplateFunction)(n.Template.templates.get(t),s):(0,a.TemplateFunction)(new n.Template(t),s):e}},924:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.funcStruct=void 0;const n=s(748);t.funcStruct=function(e,t,s,a){if(null!=e)return e;if(t instanceof HTMLElement)return e;if("object"!=typeof t||t instanceof n.Template)return e;const r=document.createElement(t.tag),i=new n.Template(r);return i.applyStruct(t),i}},543:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.funcTemplate=void 0;const n=s(748);t.funcTemplate=function(e,t,s,a){return null!=e?e:t instanceof n.Template?(s&&(Array.isArray(s)?s.forEach((e=>t.addChild(e))):t.applyStruct(s)),t):e}},49:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.funcComponent=void 0;const n=s(622),a=s(117),r=s(535);t.funcComponent=function(e,t){if(e.startsWith("[")){const s=e.match(/\[(.|)+\]/g);if(null!=s){const e=s[0].replace(/\[|\]/g,""),i="a"+(0,a.generateUUID)();return s=>{const a=new r.Css(i),l=t({args:s,style:e=>{a.setStyleStruct(e)}});a.use(l);const o=new n.Component(e,l);return o.setComponentId(i),o}}}}},623:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.funcString=void 0;const n=s(513),a=s(788),r=s(993),i=s(317),l=s(256),o=s(177),c=s(53),u=s(625),d=s(315),h=s(49);t.funcString=function(e,t,s,m){if(null!=e)return e;if("string"!=typeof t)return e;let f;if(f=(0,h.funcComponent)(t,s))return f;const p=t.replace(/\((.|)+\)/g,"").replace(/\[(.|)+\]/g,"");let y=null;return y=(0,u.stringBody)(y,p),y=(0,d.stringHead)(y,p),y=(0,n.stringId)(y,p),y=(0,r.stringQuery)(y,p),y=(0,a.stringClass)(y,p),y=(0,i.stringQueryAll)(y,p),y=(0,c.stringTag)(y,p),null==y||Array.isArray(y)||"object"!=typeof y?e:((0,l.stringAttributes)(y,t,s),/\[(.|)+\]/g.test(t)?(0,o.TemplateFunction)(y,m):(0,o.TemplateFunction)(y,s))}},256:(e,t)=>{function s(e,t,s){const n=e.match(t);if(null!=n)return n[0].replace(s,"")}Object.defineProperty(t,"__esModule",{value:!0}),t.stringAttributes=void 0,t.stringAttributes=function(e,t,n){const a=t.match(/\((.|)+\)/g),r=t.match(/\[(.|)+\]/g);if(a){const t=a[0].replace(/\(|\)/g,""),n=s(t,/id=[a-zA-Z0-9_]+/g,"id=");n&&e.id.setId(n);const r=s(t,/class=[a-zA-Z0-9_/]+/g,"class=");r&&e.classList.addClassList(r.split("/"));const i=s(t,/&=[a-zA-Z0-9_]+/g,"&=");i&&e.setInnerHTML(i)}if(r&&!t.startsWith("[")){const t=r[0].replace(/\[|\]/g,"").split(",");Array.isArray(n)&&n.length>0&&"function"==typeof n[0]&&n.forEach(((s,n)=>{e.events.addEvent(t[n],s)})),"function"==typeof n&&e.events.addEvent(t[0],n)}}},625:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringBody=void 0;const n=s(748);t.stringBody=function(e,t){return null!=e||"body"!=t?e:new n.Template(document.body)}},788:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringClass=void 0;const n=s(748);t.stringClass=function(e,t){if(null!=e)return e;if(!t.startsWith("."))return e;const s=document.getElementsByClassName(t.replace(".",""));if(null==s)throw new Error(`Element not found: ${t}`);return Array.from(s).map((e=>new n.Template(e)))}},315:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringHead=void 0;const n=s(748);t.stringHead=function(e,t){return null!=e||"head"!=t?e:new n.Template(document.head)}},513:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringId=void 0;const n=s(748);t.stringId=function(e,t){if(null!=e)return e;if(!t.startsWith("#"))return e;const s=document.getElementById(t.replace("#",""));if(null==s)throw new Error(`Element not found: ${t}`);return new n.Template(s)}},993:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringQuery=void 0;const n=s(748);t.stringQuery=function(e,t){if(null!=e)return e;if(!t.startsWith("q:"))return e;const s=document.querySelector(t.replace("q:",""));if(null==s)throw new Error(`Element not found: ${t}`);return new n.Template(s)}},317:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringQueryAll=void 0;const n=s(748);t.stringQueryAll=function(e,t){if(null!=e)return e;if(!t.startsWith("qAll:"))return e;const s=document.querySelectorAll(t.replace("qAll:",""));if(null==s)throw new Error(`Element not found: ${t}`);return Array.from(s).map((e=>new n.Template(e)))}},53:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringTag=void 0;const n=s(748);t.stringTag=function(e,t){if(null!=e)return e;const s=document.createElement(t.trim());if(null==s)throw new Error(`Element not found: ${t}`);return new n.Template(s)}},622:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0;const n=s(117);t.Component=class{constructor(e,t){this.name=e,this.template=t,this.uuid=(0,n.generateUUID)()}setComponentId(e){this.id=e}}},621:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Css=void 0;const n=s(177),a=s(118),r=s(779);class i{constructor(e){this.componentId=e,this.memory={}}setStyleStruct(e){this.struct=e}getFromPath(e){if(this.memory[e])return this.memory[e];if(""==e)return this.struct;const t=e.split("/").filter((e=>e.length>0));if(1===t.length)return this.memory[t[0]]=this.struct._[t[0]],this.memory[t[0]];const s=t.pop();return this.getFromPath(t.join("/"))._[s]}createStyle(e){const t=[e];for(;t.length>0;){const e=t.pop();if(e.statesKeys){const t=(0,n.TemplateFunction)({tag:"style",innerHTML:()=>{var t;return e.className+" {\n"+(null===(t=e.statesKeys)||void 0===t?void 0:t.map((t=>`${(0,r.processStyleKey)(t)}:${this.getFromPath(e.path.substring(1))[t].getString()};`)).join("\n"))+"\n}"},watchSates:e.statesKeys.map((t=>this.getFromPath(e.path.substring(1))[t]))});null==i.dynamicTemplate[e.className]&&(i.dynamicTemplate[e.className]=t,(0,n.TemplateFunction)("head",[t]))}e.childs&&t.push(...e.childs)}}bind(e,t){if(null!=t.path.statesKeys){const s={};for(const e of t.path.statesKeys)s[(0,r.processStyleKey)(e)]=this.getFromPath(t.path.path)[e];e.style.dynamicStyle(s)}t.path.childs&&t.path.childs.forEach((e=>{this.createStyle(e)}))}use(e){if(!this.struct)return;if(i.componentInfo[this.componentId])return void this.bind(e,i.componentInfo[this.componentId]);const t=(0,a.getStyleInfo)(this.struct,"."+this.componentId);e.classList.addClassName(this.componentId),i.template.setInnerHTML(i.template.getInnerHTML()+"\n"+t.staticStyles),this.bind(e,t),i.componentInfo[this.componentId]=t}}t.Css=i,i.template=(0,n.TemplateFunction)("style"),i.dynamicTemplate={},i.componentInfo={},0==(0,n.TemplateFunction)("head").childs.filter((e=>e.uuid==i.template.uuid)).length&&(0,n.TemplateFunction)("head").addChild(i.template)},789:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getStatesAndStyle=void 0;const n=s(330),a=s(779);t.getStatesAndStyle=function(e,t,s){const r=Object.keys(e);t.text+=s+" {\n",r.forEach((s=>{if(null==e[s]||"_"==s)return;const r=e[s];r instanceof n.State?t.statesKeys.push(s):t.text+=`${(0,a.processStyleKey)(s)}: ${r};\n`})),t.text+="}\n",0==r.filter((e=>-1==t.statesKeys.indexOf(e))).length&&(t.text="")}},118:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getStyleInfo=void 0;const n=s(789);t.getStyleInfo=function e(t,s,a={staticStyles:[]},r={name:"",path:"",className:""}){const i={text:"",statesKeys:[]};(0,n.getStatesAndStyle)(t,i,s);const l=[];i.text.length>0&&(l.push(i.text),a.staticStyles.push(...l)),i.statesKeys.length>0&&(r.statesKeys=i.statesKeys),r.className=s;const o=t._;if(!o)return{path:r,staticStyles:a.staticStyles.join("")};const c=[];return Object.keys(o).forEach((t=>{const n=t.replace(/\$\_/g,"-").replace(/\$/g,"> ").replace(/__/g," #").replace(/_/g," ."),i={name:t,className:s+" "+n,path:r.path+"/"+n};e(o[t],s+" "+n,a,i),i.statesKeys&&c.push(i)})),c.length>0&&(r.childs=c),{path:r,staticStyles:a.staticStyles.join("")}}},779:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.processStyleKey=void 0,t.processStyleKey=function(e){const t=e.match(/([a-z][A-Z])/g);return null!=t&&t.forEach((t=>{const s=t[0]+"-"+t[1].toLowerCase();e=e.replace(t,s)})),e}},330:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.State=void 0;const n=s(117),a=s(443);t.State=class{constructor(e){this._value=e,this._name="State",this.uuid=(0,n.generateUUID)(),this.updateCallbacks=[]}onUpdate(e){this.updateCallbacks.push(e)}setPrefixString(e){this.prefix=e}set(e){if((0,a.equal)(this._value,e))return;const t=this._value;this._value=e,this.updateCallbacks.forEach((s=>s(e,t)))}get(){return this._value}getString(){return this.prefix?this.prefix(this._value):""+this._value}}},830:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Attributes=void 0;const n=s(411),a=s(559);class r extends a.BaseClass{constructor(){super(...arguments),this.data={}}setAttribute(e,t){this.data[e]=t,this.template.element.setAttribute(e,t)}deleteAttribute(e){delete this.data[e],this.template.element.removeAttribute(e)}setAttributes(e){Object.keys(e).forEach((t=>{this.setAttribute(t,e[t])}))}deleteAttributes(e){Object.keys(e).forEach((e=>{this.deleteAttribute(e)}))}dynamicAttributes(e){const t=this;(0,n.dynamicObject)(this.template,e,{setKey(e,s){t.setAttribute(e,s)},setValue(e){t.setAttributes(e)},deleteKey(e,s){t.deleteAttribute(e)},deleteValue(e){t.deleteAttributes(e)}})}}t.Attributes=r},559:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseClass=void 0,t.BaseClass=class{constructor(e){this.template=e}get(){return this.data}}},316:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ClassList=void 0;const n=s(279),a=s(559);class r extends a.BaseClass{constructor(){super(...arguments),this.data=new Set}toggleClassName(e){this.data.has(e)?this.data.delete(e):this.data.add(e),this.template.element.classList.toggle(e)}addClassName(e){this.data.add(e),this.template.element.classList.add(e)}removeClassName(e){this.data.delete(e),this.template.element.classList.remove(e)}dynamicClassName(e){const t=this;(0,n.dynamicValue)(e,this.template,{deleteValue(e){t.removeClassName(e)},setValue(e){t.addClassName(e)}})}addClassList(e){0!=e.length&&e.forEach((e=>this.addClassName(e)))}removeClassList(e){0!=e.length&&e.forEach((e=>this.removeClassName(e)))}dynamicClassList(e){const t=this;(0,n.dynamicValue)(e,this.template,{setValue(e){t.addClassList(e)},deleteValue(e){t.removeClassList(e)}})}}t.ClassList=r},949:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Events=void 0;const n=s(559);class a extends n.BaseClass{constructor(){super(...arguments),this.data={}}addEvent(e,t){this.data[e]=t.bind(this),this.template.element.addEventListener(e,(e=>t.bind(this.template)(e)))}addEvents(e){Object.keys(e).forEach((t=>{this.addEvent(t,e[t])}))}}t.Events=a},585:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ID=void 0;const n=s(279),a=s(559);class r extends a.BaseClass{setId(e){""!=e&&(this.data=e,this.template.element.id=e)}dynamicId(e){const t=this;(0,n.dynamicValue)(e,this.template,{setValue(e){t.setId(e)},deleteValue(){}})}}t.ID=r},464:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Show=void 0;const n=s(279),a=s(559);class r extends a.BaseClass{constructor(){super(...arguments),this.data=!1}setShow(e){if(null!=this.template.parent){if(this.data=e,e){const e=this.template.parent.childs.filter((e=>e.show||e==this.template)),t=e.indexOf(this.template);return 1==e.length?void this.template.parent.element.appendChild(this.template.element):0==t?void this.template.parent.element.insertBefore(this.template.element,e[1].element):t==e.length-1?void this.template.parent.element.appendChild(this.template.element):void this.template.parent.element.insertBefore(this.template.element,e[t+1].element)}this.template.parent.element.removeChild(this.template.element)}}dynamicShow(e){const t=this;(0,n.dynamicValue)(e,this.template,{deleteValue(){},setValue(e){t.setShow(e)}})}}t.Show=r},554:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Style=void 0;const n=s(411),a=s(559);class r extends a.BaseClass{constructor(){super(...arguments),this.data={}}removeStyle(e){return delete this.data[e],this.template.element.style.removeProperty(e),this}setStyle(e,t){const s=e.match(/([a-z][A-Z])/g);return null!=s&&s.forEach((t=>{const s=t[0]+"-"+t[1].toLowerCase();e=e.replace(t,s)})),this.data[e]=t,this.template.element.style.setProperty(e,t),this}dynamicStyle(e){const t=this;(0,n.dynamicObject)(this.template,e,{deleteKey(e,s){t.removeStyle(e)},deleteValue(e){t.removeStyles(e)},setKey(e,s){t.setStyle(e,s)},setValue(e){t.setStyles(e)}})}setStyles(e){return Object.keys(e).forEach((t=>{this.setStyle(t,e[t])})),this}removeStyles(e){Object.keys(e).forEach((e=>{this.removeStyle(e)}))}}t.Style=r},748:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Template=void 0;const n=s(117),a=s(316),r=s(554),i=s(830),l=s(949),o=s(585),c=s(620),u=s(279),d=s(464),h=s(622);class m{constructor(e){this.updateFuncs=[],this._name="Template",this.uuid=(0,n.generateUUID)(),this.element=e,this.childs=[],this.classList=new a.ClassList(this),this.style=new r.Style(this),this.attributes=new i.Attributes(this),this.events=new l.Events(this),this.id=new o.ID(this),this.show=new d.Show(this),this.tag=e.tagName.toLowerCase(),this.id.setId(e.id),m.templates.set(e,this)}applyStruct(e){this.struct=e,e.id&&this.id.dynamicId(e.id),e.style&&this.style.dynamicStyle(e.style),e.attributes&&this.attributes.dynamicAttributes(e.attributes),e.events&&this.events.addEvents(e.events),e.innerHTML&&this.dynamicInnerHTML(e.innerHTML),e.childs&&this.dynamicChilds(e.childs),e.watchSates&&this.initWatchStates(e.watchSates),e.classList&&this.classList.dynamicClassList(e.classList),e.className&&this.classList.dynamicClassName(e.className)}setInnerHTML(e){this.element.innerHTML=e}dynamicInnerHTML(e){const t=this;(0,u.dynamicValue)(e,this,{deleteValue(){},setValue(e){t.setInnerHTML(e)}})}getInnerHTML(){return this.element.innerHTML}addChild(e){e instanceof h.Component?(0,c.addChild)(this,e.template):(0,c.addChild)(this,e)}deleteChilds(){for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.childs=[]}dynamicChilds(e){const t=this;(0,u.dynamicValue)(e,this,{deleteValue(e){t.deleteChilds()},setValue(e){e.forEach((e=>{t.addChild(e)}))}})}initWatchStates(e){e.forEach((e=>{e.onUpdate((()=>{this.updateFuncs.forEach((e=>e.call()))}))}))}addUpdateFunc(e){this.updateFuncs.push(e)}_elemenInDom(){this.struct&&null!=this.struct.show&&this.show.dynamicShow(this.struct.show),this.childs.forEach((e=>e._elemenInDom()))}}t.Template=m,m.templates=new Map},24:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UpdateFunction=void 0,t.UpdateFunction=class{constructor(e){this.callback=e}call(){const e=this.callback(this.prev);this.prev=e}}},620:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addChild=void 0;const n=s(890),a=s(34),r=s(709),i=s(353);t.addChild=function(e,t){let s=null;s=(0,n.addChildHTML)(e,s,t),s=(0,a.addChildString)(e,s,t),s=(0,i.addChildTemplate)(e,s,t),s=(0,r.addChildTemplateStruct)(e,s,t)}},890:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addChildHTML=void 0;const n=s(748);t.addChildHTML=function(e,t,s){if(null!=t)return t;if(!(s instanceof HTMLElement))return t;const a=new n.Template(s);return e.childs.push(a),e.element.appendChild(s),!0}},34:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addChildString=void 0,t.addChildString=function(e,t,s){return null!=t?t:"string"==typeof s||t}},709:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addChildTemplateStruct=void 0;const n=s(748);t.addChildTemplateStruct=function(e,t,s){if(null!=t)return t;if("object"!=typeof s)return t;if(s instanceof n.Template)return t;const a=s,r=document.createElement(a.tag),i=new n.Template(r);return i.parent=e,e.element.appendChild(i.element),e.childs.push(i),i.applyStruct(a),!0}},353:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addChildTemplate=void 0;const n=s(748);t.addChildTemplate=function(e,t,s){return null!=t?t:s instanceof n.Template?(s.parent=e,e.childs.push(s),e.element.appendChild(s.element),!0):t}},411:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dynamicObject=void 0;const n=s(330),a=s(279);t.dynamicObject=(e,t,s)=>{(0,a.dynamicValue)(t,e,s),"object"!=typeof t||t instanceof n.State||Array.isArray(t)||Object.keys(t).forEach((n=>{(0,a.dynamicValue)(t[n],e,{deleteValue:e=>s.deleteKey(n,e),setValue:e=>s.setKey(n,e)})}))}},279:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dynamicValue=void 0;const n=s(330),a=s(443),r=s(24);t.dynamicValue=(e,t,{deleteValue:s,setValue:i})=>{if("function"==typeof e){const n=new r.UpdateFunction((t=>{const n=e();return(0,a.equal)(t,n)||(t&&s(t),i(n)),n}));return n.call(),void t.addUpdateFunc(n)}if(e instanceof n.State)return i(e.getString()),void e.onUpdate(((t,n)=>{n&&s(n),e.prefix&&i(e.prefix(t)),i(t)}));i(e)}},535:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Css=t.Template=t.State=void 0;var n=s(330);Object.defineProperty(t,"State",{enumerable:!0,get:function(){return n.State}});var a=s(748);Object.defineProperty(t,"Template",{enumerable:!0,get:function(){return a.Template}});var r=s(621);Object.defineProperty(t,"Css",{enumerable:!0,get:function(){return r.Css}})},443:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.equal=void 0,t.equal=function(e,t){return"object"==typeof e&&"object"==typeof t?JSON.stringify(e)===JSON.stringify(t):e==t}},117:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateUUID=void 0,t.generateUUID=function(){let e=(new Date).getTime(),t="undefined"!=typeof performance&&performance.now&&1e3*performance.now()||0;return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(s){let n=16*Math.random();return e>0?(n=(e+n)%16|0,e=Math.floor(e/16)):(n=(t+n)%16|0,t=Math.floor(t/16)),("x"===s?n:3&n|8).toString(16)}))}},506:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.t=t.State=t.Template=void 0;var n=s(535);Object.defineProperty(t,"Template",{enumerable:!0,get:function(){return n.Template}}),Object.defineProperty(t,"State",{enumerable:!0,get:function(){return n.State}});var a=s(177);Object.defineProperty(t,"t",{enumerable:!0,get:function(){return a.TemplateFunction}})}},t={};function s(n){var a=t[n];if(void 0!==a)return a.exports;var r=t[n]={exports:{}};return e[n].call(r.exports,r,r.exports,s),r.exports}s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.p="/",(()=>{const e=s(506),t=s(328);(0,e.t)("#root",[{tag:"div",className:"container"}]),Promise.all([t.default.load({js_draw:function(e){console.log(e,"hola")}})]).then((()=>{t.default.callWasm("set_mem",0,0,11),t.default.callWasm("set_mem",0,9,11),t.default.callWasm("set_mem",1,0,22),t.default.callWasm("set_mem",1,9,22),t.default.callWasm("set_mem",2,0,33),t.default.callWasm("set_mem",2,19,33),t.default.callWasm("resize_mem",0,20),t.default.callWasm("memBufferPointer")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0F4QixlQUNBLFVBQ0EsSUFBQUMsR0FBRSxRQUFTLENBQ1QsQ0FDRXhOLElBQUssTUFDTDRDLFVBQVcsZUFJZjZLLFFBQVFDLElBQUksQ0FDVixVQUFXNVEsS0FBSyxDQUNkNlEsUUFBUyxTQUFVN1UsR0FDakJ5QixRQUFRQyxJQUFJMUIsRUFBTSxPQUNwQixNQUVEOFUsTUFBSyxLQUNOLFVBQVczUSxTQUFTLFVBQVcsRUFBRyxFQUFHLElBQ3JDLFVBQVdBLFNBQVMsVUFBVyxFQUFHLEVBQUcsSUFDckMsVUFBV0EsU0FBUyxVQUFXLEVBQUcsRUFBRyxJQUNyQyxVQUFXQSxTQUFTLFVBQVcsRUFBRyxFQUFHLElBQ3JDLFVBQVdBLFNBQVMsVUFBVyxFQUFHLEVBQUcsSUFDckMsVUFBV0EsU0FBUyxVQUFXLEVBQUcsR0FBSSxJQUN0QyxVQUFXQSxTQUFTLGFBQWMsRUFBRyxJQUNyQyxVQUFXQSxTQUFTLG1CQUFtQixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi9zcmMvYXNzZW1ibHkvd2FzbS9yZW5kZXIvcmVuZGVyLndhc20iLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi9zcmMvYXNzZW1ibHkvd2FzbS9yZW5kZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi9zcmMvY29yZS9XYXNtL0xvYWRlcldhc20udHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi9zcmMvY29yZS9XYXNtL1dhc20udHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi9zcmMvY29yZS9XYXNtL1dhc21BcmdzLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL1RlbXBsYXRlRnVuYy9UZW1wbGF0ZUZ1bmMudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvVGVtcGxhdGVGdW5jL2Z1bmNIVE1MLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL1RlbXBsYXRlRnVuYy9mdW5jU3RydWN0LnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL1RlbXBsYXRlRnVuYy9mdW5jVGVtcGxhdGUudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvVGVtcGxhdGVGdW5jL3N0cmluZy9mdW5jQ29tcG9uZW50LnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL1RlbXBsYXRlRnVuYy9zdHJpbmcvZnVuY1N0cmluZy50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9UZW1wbGF0ZUZ1bmMvc3RyaW5nL3N0cmluZ0F0dHJpYnV0ZXMudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvVGVtcGxhdGVGdW5jL3N0cmluZy9zdHJpbmdCb2R5LnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL1RlbXBsYXRlRnVuYy9zdHJpbmcvc3RyaW5nQ2xhc3MudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvVGVtcGxhdGVGdW5jL3N0cmluZy9zdHJpbmdIZWFkLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL1RlbXBsYXRlRnVuYy9zdHJpbmcvc3RyaW5nSWQudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvVGVtcGxhdGVGdW5jL3N0cmluZy9zdHJpbmdRdWVyeS50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9UZW1wbGF0ZUZ1bmMvc3RyaW5nL3N0cmluZ1F1ZXJ5QWxsLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL1RlbXBsYXRlRnVuYy9zdHJpbmcvc3RyaW5nVGFnLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL2NvcmUvQ29tcG9uZW50L0NvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9jb3JlL0Nzcy9Dc3MudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvY29yZS9Dc3MvZ2V0U3RhdGVzQW5kU3R5bGUudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvY29yZS9Dc3MvZ2V0U3R5bGVJbmZvLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL2NvcmUvQ3NzL3Byb2Nlc3NTdHlsZUtleS50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9jb3JlL1N0YXRlLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL2NvcmUvVGVtcGxhdGUvUHJvcGVydGllcy9BdHRyaWJ1dGVzLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL2NvcmUvVGVtcGxhdGUvUHJvcGVydGllcy9CYXNlQ2xhc3MudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvY29yZS9UZW1wbGF0ZS9Qcm9wZXJ0aWVzL0NsYXNzTGlzdC50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9jb3JlL1RlbXBsYXRlL1Byb3BlcnRpZXMvRXZlbnRzLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL2NvcmUvVGVtcGxhdGUvUHJvcGVydGllcy9JZC50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9jb3JlL1RlbXBsYXRlL1Byb3BlcnRpZXMvU2hvdy50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9jb3JlL1RlbXBsYXRlL1Byb3BlcnRpZXMvU3R5bGUudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvY29yZS9UZW1wbGF0ZS9UZW1wbGF0ZS50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9jb3JlL1RlbXBsYXRlL1VwZGF0ZUZ1bmN0aW9uLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL2NvcmUvVGVtcGxhdGUvYWRkQ2hpbGQvYWRkQ2hpbGQudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvY29yZS9UZW1wbGF0ZS9hZGRDaGlsZC9odG1sQ2hpbGQudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvY29yZS9UZW1wbGF0ZS9hZGRDaGlsZC9zdHJpbmdDaGlsZC50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9jb3JlL1RlbXBsYXRlL2FkZENoaWxkL3N0cnVjdENoaWxkLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL2NvcmUvVGVtcGxhdGUvYWRkQ2hpbGQvdGVtcGxhdGVDaGlsZC50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9jb3JlL1RlbXBsYXRlL3V0aWwvZHluYW1pY09iamVjdC50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9jb3JlL1RlbXBsYXRlL3V0aWwvZHluYW1pY1ZhbHVlLnRzIiwid2VicGFjazovL3BydWV2YS0yLy4uL3RlbXBsYXRlLWVuZ2luZS9wYWNrYWdlL2NvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvY29yZS91dGlscy9lcXVhbC50cyIsIndlYnBhY2s6Ly9wcnVldmEtMi8uLi90ZW1wbGF0ZS1lbmdpbmUvcGFja2FnZS9jb3JlL3V0aWxzL2dlbmVyZVVVSUQudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvLi4vdGVtcGxhdGUtZW5naW5lL3BhY2thZ2UvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3BydWV2YS0yL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcHJ1ZXZhLTIvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9wcnVldmEtMi93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9wcnVldmEtMi8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwicmVzb3VyY2VzL3dhc20vcmVuZGVyLndhc21cIjsiLCJpbXBvcnQgeyBXYXNtIH0gZnJvbSBcImNvcmUvV2FzbS9XYXNtXCI7XHJcbmltcG9ydCB3YXNtUGF0aCBmcm9tIFwiLi9yZW5kZXIud2FzbVwiO1xyXG50eXBlIElNZXRob2RzID0ge1xyXG5yZXNpemVfbWVtOnthcmdzOltudW1iZXIsbnVtYmVyXTtcclxucmVzOnZvaWQ7XHJcbn07XHJcbnJlYWRfbWVtOnthcmdzOltudW1iZXIsbnVtYmVyXTtcclxucmVzOm51bWJlcjtcclxufTtcclxuc2V0X21lbTp7YXJnczpbbnVtYmVyLG51bWJlcixudW1iZXJdO1xyXG5yZXM6dm9pZDtcclxufTtcclxubWVtQnVmZmVyUG9pbnRlcjp7YXJnczpbXTtcclxucmVzOm51bWJlcjtcclxufTtcclxufVxyXG5jb25zdCB3YXNtID0gbmV3IFdhc208SU1ldGhvZHM+KCdyZW5kZXInKVxyXG53YXNtLnNldEZpbGUod2FzbVBhdGgpO1xyXG5leHBvcnQgZGVmYXVsdCB3YXNtO1xyXG4iLCJ0eXBlIElFeHBvcnRzID0gUmVjb3JkPHN0cmluZywgUmVjb3JkPHN0cmluZywgYW55Pj47XHJcbnR5cGUgSUJ1ZmZlcnMgPSBSZWNvcmQ8c3RyaW5nLCBBcnJheUJ1ZmZlcj47XHJcbnR5cGUgSUZpbGVzUGF0aCA9IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XHJcbnR5cGUgSUhlZXBSZWdpc3RlciA9IFJlY29yZDxzdHJpbmcsIFVpbnQ4QXJyYXk+O1xyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRlcldhc20ge1xyXG4gIHN0YXRpYyBleHBvcnRzOiBJRXhwb3J0cyA9IHt9O1xyXG4gIHN0YXRpYyBidWZmZXJzOiBJQnVmZmVycyA9IHt9O1xyXG4gIHN0YXRpYyBmaWxlc1BhdGg6IElGaWxlc1BhdGggPSB7fTtcclxuICBzdGF0aWMgaGVhcFJlZ2lzdGVyOiBJSGVlcFJlZ2lzdGVyID0ge307XHJcbiAgc3RhdGljIGVudkNvbmZpZzogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xyXG4gIHN0YXRpYyBkZWZhdWx0Q29uZmlnID0ge307XHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBzdGF0aWMgYXN5bmMgbG9hZEZpbGUobmFtZTogc3RyaW5nLCBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSB7XHJcbiAgICBpZiAodGhpcy5leHBvcnRzW25hbWVdKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmV4cG9ydHNbbmFtZV07XHJcbiAgICB9XHJcbiAgICBsZXQgYnVmZmVyID0gdGhpcy5idWZmZXJzW25hbWVdO1xyXG4gICAgaWYgKCFidWZmZXIpIHtcclxuICAgICAgY29uc3QgZmlsZVBhdGggPSB0aGlzLmZpbGVzUGF0aFtuYW1lXTtcclxuICAgICAgaWYgKCFmaWxlUGF0aCkgcmV0dXJuO1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGZpbGVQYXRoKTtcclxuICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcclxuXHJcbiAgICAgIGF3YWl0IHRoaXMubG9hZEZyb21CdWZmZXIobmFtZSwgYnVmZmVyLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmV4cG9ydHNbbmFtZV07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgbG9hZEZyb21CdWZmZXIoXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxyXG4gICAgZGF0YTogUmVjb3JkPHN0cmluZywgYW55PlxyXG4gICkge1xyXG4gICAgaWYgKHRoaXMuZXhwb3J0c1tuYW1lXSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgZW52LCBoZWFwIH0gPSB0aGlzLmdldERlZmF1bHRFbnYoKTtcclxuXHJcbiAgICBjb25zdCB7IGluc3RhbmNlIH0gPSBhd2FpdCBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShuZXcgVWludDhBcnJheShidWZmZXIpLCB7XHJcbiAgICAgIG1vZHVsZToge30sXHJcbiAgICAgIGVudjogeyAuLi5lbnYsIC4uLmRhdGEgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuaGVhcFJlZ2lzdGVyW25hbWVdID0gaGVhcDtcclxuXHJcbiAgICB0aGlzLmV4cG9ydHNbbmFtZV0gPSBpbnN0YW5jZS5leHBvcnRzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldERlZmF1bHRFbnYoKSB7XHJcbiAgICBjb25zdCBtZW1vcnkgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHtcclxuICAgICAgaW5pdGlhbDogNDAwMCxcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaGVhcCA9IG5ldyBVaW50OEFycmF5KG1lbW9yeS5idWZmZXIpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGVudjoge1xyXG4gICAgICAgIG1lbW9yeTogbWVtb3J5LFxyXG4gICAgICAgIExPRzogKC4uLmRhdGE6IGFueVtdKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmpvaW4oXCIgXCIpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVtc2NyaXB0ZW5fcmVzaXplX2hlYXA6IChyZXF1ZXN0ZWRTaXplOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgIHJlcXVlc3RlZFNpemUgPSByZXF1ZXN0ZWRTaXplID4+PiAwO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW1zY3JpcHRlbl9tZW1jcHlfYmlnOiAoKSA9PiB7fSxcclxuICAgICAgICBEWU5BTUlDVE9QX1BUUjogNDA5NixcclxuICAgICAgICBhYm9ydDogZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWJvcnQgXCIgKyBlcnIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWJvcnRPbkNhbm5vdEdyb3dNZW1vcnk6IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFib3J0T25DYW5ub3RHcm93TWVtb3J5IFwiICsgZXJyKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9fX2N4YV90aHJvdzogZnVuY3Rpb24gKHB0ciwgdHlwZSwgZGVzdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgXCJjeGFfdGhyb3c6IHRocm93aW5nIGFuIGV4Y2VwdGlvbiwgXCIgKyBbcHRyLCB0eXBlLCBkZXN0cnVjdG9yXVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9fX2N4YV9hbGxvY2F0ZV9leGNlcHRpb246IGZ1bmN0aW9uIChzaXplKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiY3hhX2FsbG9jYXRlX2V4Y2VwdGlvblwiICsgc2l6ZSk7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGFsd2F5cyBmYWlsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBfX19zZXRFcnJObzogZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyTm8gXCIgKyBlcnIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2Vtc2NyaXB0ZW5fZ2V0X2hlYXBfc2l6ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgcmV0dXJuIGhlYXAubGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXA6IGZ1bmN0aW9uIChzaXplKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGFsd2F5cyBmYWlsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZW1zY3JpcHRlbl9tZW1jcHlfYmlnOiBmdW5jdGlvbiAoZGVzdCwgc3JjLCBjb3VudCkge1xyXG4gICAgICAgICAgaGVhcC5zZXQoaGVhcC5zdWJhcnJheShzcmMsIHNyYyArIGNvdW50KSwgZGVzdCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfWm5hbTogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgICAgX19tZW1vcnlfYmFzZTogMCxcclxuICAgICAgICBfX3RhYmxlX2Jhc2U6IDAsXHJcbiAgICAgICAgdGFibGU6IG5ldyBXZWJBc3NlbWJseS5UYWJsZSh7XHJcbiAgICAgICAgICBpbml0aWFsOiAzMyxcclxuICAgICAgICAgIG1heGltdW06IDMzLFxyXG4gICAgICAgICAgZWxlbWVudDogXCJhbnlmdW5jXCIsXHJcbiAgICAgICAgfSksXHJcbiAgICAgIH0sXHJcbiAgICAgIGhlYXAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldEV4cG9ydHMobmFtZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5leHBvcnRzW25hbWVdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldEFycmF5QnVmZmVyKG5hbWU6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyc1tuYW1lXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWdpc3RlckZpbGUobmFtZTogc3RyaW5nLCBmaWxlUGF0aDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmZpbGVzUGF0aFtuYW1lXSA9IGZpbGVQYXRoO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJlZ2lzdGVyQnVmZmVyKG5hbWU6IHN0cmluZywgYnVmZmVyOiBBcnJheUJ1ZmZlcikge1xyXG4gICAgdGhpcy5idWZmZXJzW25hbWVdID0gYnVmZmVyO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGlzTG9hZGVkKG5hbWU6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMuZXhwb3J0c1tuYW1lXSAhPSB1bmRlZmluZWQ7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IExvYWRlcldhc20gfSBmcm9tIFwiLi9Mb2FkZXJXYXNtXCI7XHJcbmltcG9ydCB7IFdhc21BcmdzIH0gZnJvbSBcIi4vV2FzbUFyZ3NcIjtcclxuXHJcbmludGVyZmFjZSBJRXhwb3J0c01ldGhvZCB7XHJcbiAgYXJnczogYW55W107XHJcbiAgcmVzOiBhbnk7XHJcbn1cclxuXHJcbnR5cGUgSUV4cG9ydHNNZXRob2RzID0gUmVjb3JkPHN0cmluZywgSUV4cG9ydHNNZXRob2Q+O1xyXG5cclxuZXhwb3J0IGNsYXNzIFdhc208SSBleHRlbmRzIElFeHBvcnRzTWV0aG9kcyA9IHt9PiB7XHJcbiAgZXhwb3J0czogUmVjb3JkPHN0cmluZywgYW55PjtcclxuICBmaWxlUGF0aDogc3RyaW5nO1xyXG4gIGhlYXA6IFVpbnQ4QXJyYXk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lOiBzdHJpbmcpIHt9XHJcblxyXG4gIHNldEZpbGUoZmlsZXBhdGg6IHN0cmluZykge1xyXG4gICAgdGhpcy5maWxlUGF0aCA9IGZpbGVwYXRoO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9hZChkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge30pIHtcclxuICAgIGNvbnN0IGV4cG9ydHMgPSBMb2FkZXJXYXNtLmdldEV4cG9ydHModGhpcy5uYW1lKTtcclxuXHJcbiAgICBpZiAoZXhwb3J0cyA9PSB1bmRlZmluZWQgJiYgdGhpcy5maWxlUGF0aCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgYXdhaXQgV2FzbS5sb2FkRmlsZSh0aGlzLm5hbWUsIHRoaXMuZmlsZVBhdGgsIGRhdGEpO1xyXG4gICAgICB0aGlzLmV4cG9ydHMgPSBMb2FkZXJXYXNtLmdldEV4cG9ydHModGhpcy5uYW1lKTtcclxuICAgICAgdGhpcy5oZWFwID0gTG9hZGVyV2FzbS5oZWFwUmVnaXN0ZXJbdGhpcy5uYW1lXTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaGVhcCA9IExvYWRlcldhc20uaGVhcFJlZ2lzdGVyW3RoaXMubmFtZV07XHJcbiAgICB0aGlzLmV4cG9ydHMgPSBleHBvcnRzO1xyXG4gIH1cclxuXHJcbiAgY2FsbFdhc208SyBleHRlbmRzIGtleW9mIEk+KFxyXG4gICAgbWV0aG9kTmFtZTogSyxcclxuICAgIC4uLmFyZ3M6IElbS11bXCJhcmdzXCJdXHJcbiAgKTogSVtLXVtcInJlc1wiXSB7XHJcbiAgICBjb25zdCBtZXRob2QgPSB0aGlzLmV4cG9ydHNbbWV0aG9kTmFtZSBhcyBzdHJpbmddO1xyXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09IDApIHtcclxuICAgICAgcmV0dXJuIG1ldGhvZCgpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgd2FzbUFyZ3MgPSBuZXcgV2FzbUFyZ3MoLi4uYXJncyk7XHJcbiAgICB3YXNtQXJncy5iaW5kKHRoaXMpO1xyXG4gICAgY29uc3QgX2FyZ3MgPSB3YXNtQXJncy5nZXRBcmdzKCk7XHJcbiAgICByZXR1cm4gbWV0aG9kKC4uLl9hcmdzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhc3luYyBsb2FkRmlsZShcclxuICAgIG5hbWU6IHN0cmluZyxcclxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXHJcbiAgICBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+XHJcbiAgKSB7XHJcbiAgICBMb2FkZXJXYXNtLnJlZ2lzdGVyRmlsZShuYW1lLCBmaWxlUGF0aCk7XHJcbiAgICBhd2FpdCBMb2FkZXJXYXNtLmxvYWRGaWxlKG5hbWUsIGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFzeW5jIGxvYWRXYXNtQnVmZmVyKFxyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcclxuICAgIGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT5cclxuICApIHtcclxuICAgIExvYWRlcldhc20ucmVnaXN0ZXJCdWZmZXIobmFtZSwgYnVmZmVyKTtcclxuICAgIGF3YWl0IExvYWRlcldhc20ubG9hZEZyb21CdWZmZXIobmFtZSwgYnVmZmVyLCBkYXRhKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSUJ1ZmZlckluZm8gfSBmcm9tIFwiLi9JQnVmZmVySW5mb1wiO1xyXG5pbXBvcnQgeyBXYXNtIH0gZnJvbSBcIi4vV2FzbVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdhc21BcmdzPFQgZXh0ZW5kcyAoSUJ1ZmZlckluZm8gfCBudW1iZXIpW10gPSBbXT4ge1xyXG4gIHB1YmxpYyBhcmdzSW5mbzogVDtcclxuICBwdWJsaWMgYnVmZmVyczogQXJyYXlCdWZmZXJbXTtcclxuICBwdWJsaWMgb3V0QnVmZmVyczogbnVtYmVyW107XHJcbiAgcHVibGljIGFyZ3M/OiBudW1iZXJbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoLi4uYXJnc0luZm86IFQpIHtcclxuICAgIHRoaXMuYXJnc0luZm8gPSBhcmdzSW5mbztcclxuICAgIHRoaXMuYnVmZmVycyA9IFtdO1xyXG4gICAgdGhpcy5vdXRCdWZmZXJzID0gW107XHJcbiAgfVxyXG5cclxuICBnZXRDbGFzc0J1ZmZlcih0eXBlOiBzdHJpbmcpIHtcclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICBjYXNlIFwidWludDhDbGFtcGVkXCI6XHJcbiAgICAgICAgcmV0dXJuIFVpbnQ4Q2xhbXBlZEFycmF5O1xyXG4gICAgICBjYXNlIFwidWludDhcIjpcclxuICAgICAgICByZXR1cm4gVWludDhBcnJheTtcclxuICAgICAgY2FzZSBcInVpbnQxNlwiOlxyXG4gICAgICAgIHJldHVybiBVaW50MTZBcnJheTtcclxuICAgICAgY2FzZSBcInVpbnQzMlwiOlxyXG4gICAgICAgIHJldHVybiBVaW50MzJBcnJheTtcclxuICAgICAgY2FzZSBcImludDhcIjpcclxuICAgICAgICByZXR1cm4gSW50OEFycmF5O1xyXG4gICAgICBjYXNlIFwiaW50MTZcIjpcclxuICAgICAgICByZXR1cm4gSW50MTZBcnJheTtcclxuICAgICAgY2FzZSBcImludDMyXCI6XHJcbiAgICAgICAgcmV0dXJuIEludDMyQXJyYXk7XHJcbiAgICAgIGNhc2UgXCJmbG9hdDMyXCI6XHJcbiAgICAgICAgcmV0dXJuIEZsb2F0MzJBcnJheTtcclxuICAgICAgY2FzZSBcImZsb2F0NjRcIjpcclxuICAgICAgICByZXR1cm4gRmxvYXQ2NEFycmF5O1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBiaW5kKHdhc206IFdhc208YW55Pikge1xyXG4gICAgdGhpcy5idWZmZXJzID0gW107XHJcbiAgICB0aGlzLmFyZ3MgPSB0aGlzLmFyZ3NJbmZvLm1hcCgoYXJnLCBpKSA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2YgYXJnID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBjb25zdCBjbGFzc0J1ZmZlciA9IHRoaXMuZ2V0Q2xhc3NCdWZmZXIoYXJnLnR5cGUpO1xyXG4gICAgICAgIGNvbnN0IHBvaW50ZXIgPSB3YXNtLmV4cG9ydHNbXCJtYWxsb2NcIl0oXHJcbiAgICAgICAgICBjbGFzc0J1ZmZlci5CWVRFU19QRVJfRUxFTUVOVCAqIGFyZy5zaXplXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IGNsYXNzQnVmZmVyKFxyXG4gICAgICAgICAgd2FzbS5leHBvcnRzW1wibWVtb3J5XCJdLmJ1ZmZlcixcclxuICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICBhcmcuc2l6ZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmIChhcmcuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBidWZmZXIuc2V0KGFyZy5kYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlcik7XHJcbiAgICAgICAgaWYgKGFyZy5vdXQpIHtcclxuICAgICAgICAgIHRoaXMub3V0QnVmZmVycy5wdXNoKHRoaXMuYnVmZmVycy5sZW5ndGggLSAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBidWZmZXIuYnl0ZU9mZnNldDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYXJnO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRBcmdzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYXJncztcclxuICB9XHJcblxyXG4gIGdldE91dEJ1ZmZlcnMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vdXRCdWZmZXJzLm1hcCgoaSkgPT4gdGhpcy5idWZmZXJzW2ldKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSUR5bmFtaWNTdHJ1Y3QgfSBmcm9tIFwiLi4vY29yZS9UZW1wbGF0ZS90eXBlcy9JRHluYW1pY1N0cnVjdFwiO1xyXG5pbXBvcnQgeyBJQXJnQSB9IGZyb20gXCIuL3R5cGVzL0lBcmdBXCI7XHJcbmltcG9ydCB7IElBcmdBU3RyaW5nIH0gZnJvbSBcIi4vdHlwZXMvSUFyZ0FTdHJpbmdcIjtcclxuaW1wb3J0IHsgSUFyZ0IgfSBmcm9tIFwiLi90eXBlcy9JQXJnQlwiO1xyXG5pbXBvcnQgeyBJQXJnQyB9IGZyb20gXCIuL3R5cGVzL0lBcmdDXCI7XHJcbmltcG9ydCB7IGZ1bmNTdHJ1Y3QgfSBmcm9tIFwiLi9mdW5jU3RydWN0XCI7XHJcbmltcG9ydCB7IGZ1bmNIVE1MIH0gZnJvbSBcIi4vZnVuY0hUTUxcIjtcclxuaW1wb3J0IHsgZnVuY1N0cmluZyB9IGZyb20gXCIuL3N0cmluZy9mdW5jU3RyaW5nXCI7XHJcbmltcG9ydCB7IGZ1bmNUZW1wbGF0ZSB9IGZyb20gXCIuL2Z1bmNUZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi9jb3JlL1RlbXBsYXRlL1RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IFRGdW5jIH0gZnJvbSBcIi4vdHlwZXMvSVRlbXBsYXRlRnVuY3Rpb25cIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBUZW1wbGF0ZUZ1bmN0aW9uPFxyXG4gIFQgZXh0ZW5kcyBJQXJnQSxcclxuICBXIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IHt9XHJcbj4oYXJnQTogVCwgYXJnQj86IElBcmdCPFQsIFc+LCBhcmdDPzogSUFyZ0M8VD4pOiBURnVuYzxULCBXPiB7XHJcbiAgbGV0IHJlczogYW55ID0gbnVsbDtcclxuXHJcbiAgcmVzID0gZnVuY1N0cmluZyhcclxuICAgIHJlcyxcclxuICAgIGFyZ0EsXHJcbiAgICBhcmdCIGFzIElBcmdCPElBcmdBU3RyaW5nPixcclxuICAgIGFyZ0MgYXMgSUFyZ0M8SUFyZ0FTdHJpbmc+XHJcbiAgKTtcclxuXHJcbiAgcmVzID0gZnVuY0hUTUwoXHJcbiAgICByZXMsXHJcbiAgICBhcmdBLFxyXG4gICAgYXJnQiBhcyBJQXJnQjxIVE1MRWxlbWVudD4sXHJcbiAgICBhcmdDIGFzIElBcmdDPEhUTUxFbGVtZW50PlxyXG4gICk7XHJcblxyXG4gIHJlcyA9IGZ1bmNUZW1wbGF0ZShcclxuICAgIHJlcyxcclxuICAgIGFyZ0EsXHJcbiAgICBhcmdCIGFzIElBcmdCPFRlbXBsYXRlPixcclxuICAgIGFyZ0MgYXMgSUFyZ0M8VGVtcGxhdGU+XHJcbiAgKTtcclxuXHJcbiAgcmVzID0gZnVuY1N0cnVjdChcclxuICAgIHJlcyxcclxuICAgIGFyZ0EsXHJcbiAgICBhcmdCIGFzIElBcmdCPElEeW5hbWljU3RydWN0PixcclxuICAgIGFyZ0MgYXMgSUFyZ0M8SUR5bmFtaWNTdHJ1Y3Q+XHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG4iLCJpbXBvcnQgeyBJQXJnQSB9IGZyb20gXCIuL3R5cGVzL0lBcmdBXCI7XHJcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uL2NvcmUvVGVtcGxhdGUvVGVtcGxhdGVcIjtcclxuaW1wb3J0IHsgSUFyZ0IgfSBmcm9tIFwiLi90eXBlcy9JQXJnQlwiO1xyXG5pbXBvcnQgeyBJQXJnQyB9IGZyb20gXCIuL3R5cGVzL0lBcmdDXCI7XHJcbmltcG9ydCB7IFRlbXBsYXRlRnVuY3Rpb24gfSBmcm9tIFwiLi9UZW1wbGF0ZUZ1bmNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmdW5jSFRNTChcclxuICByZXM6IGFueSxcclxuICBhcmdBOiBJQXJnQSxcclxuICBhcmdCOiBJQXJnQjxIVE1MRWxlbWVudD4sXHJcbiAgYXJnQzogSUFyZ0M8SFRNTEVsZW1lbnQ+XHJcbikge1xyXG4gIGlmIChyZXMgIT0gbnVsbCkgcmV0dXJuIHJlcztcclxuICBpZiAoIShhcmdBIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSByZXR1cm4gcmVzO1xyXG5cclxuICBpZiAoVGVtcGxhdGUudGVtcGxhdGVzLmhhcyhhcmdBKSkge1xyXG4gICAgcmV0dXJuIFRlbXBsYXRlRnVuY3Rpb24oXHJcbiAgICAgIFRlbXBsYXRlLnRlbXBsYXRlcy5nZXQoYXJnQSBhcyBIVE1MRWxlbWVudCkgYXMgVGVtcGxhdGUsXHJcbiAgICAgIGFyZ0JcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gVGVtcGxhdGVGdW5jdGlvbihuZXcgVGVtcGxhdGUoYXJnQSksIGFyZ0IpO1xyXG59XHJcbiIsImltcG9ydCB7IElEeW5hbWljU3RydWN0IH0gZnJvbSBcIi4uL2NvcmUvVGVtcGxhdGUvdHlwZXMvSUR5bmFtaWNTdHJ1Y3RcIjtcclxuaW1wb3J0IHsgSUFyZ0EgfSBmcm9tIFwiLi90eXBlcy9JQXJnQVwiO1xyXG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi9jb3JlL1RlbXBsYXRlL1RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IElBcmdCIH0gZnJvbSBcIi4vdHlwZXMvSUFyZ0JcIjtcclxuaW1wb3J0IHsgSUFyZ0MgfSBmcm9tIFwiLi90eXBlcy9JQXJnQ1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZ1bmNTdHJ1Y3QoXHJcbiAgcmVzOiBhbnksXHJcbiAgYXJnQTogSUFyZ0EsXHJcbiAgYXJnQjogSUFyZ0I8SUR5bmFtaWNTdHJ1Y3Q+LFxyXG4gIGFyZ0M6IElBcmdDPElEeW5hbWljU3RydWN0PlxyXG4pIHtcclxuICBpZiAocmVzICE9IG51bGwpIHJldHVybiByZXM7XHJcbiAgaWYgKGFyZ0EgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgcmV0dXJuIHJlcztcclxuICBpZiAodHlwZW9mIGFyZ0EgIT0gXCJvYmplY3RcIiB8fCBhcmdBIGluc3RhbmNlb2YgVGVtcGxhdGUpIHJldHVybiByZXM7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYXJnQS50YWcpO1xyXG4gIGNvbnN0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKGVsZW1lbnQpO1xyXG4gIHRlbXBsYXRlLmFwcGx5U3RydWN0KGFyZ0EpO1xyXG5cclxuICByZXR1cm4gdGVtcGxhdGU7XHJcbn1cclxuIiwiaW1wb3J0IHsgSUFyZ0EgfSBmcm9tIFwiLi90eXBlcy9JQXJnQVwiO1xyXG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi9jb3JlL1RlbXBsYXRlL1RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IElBcmdCIH0gZnJvbSBcIi4vdHlwZXMvSUFyZ0JcIjtcclxuaW1wb3J0IHsgSUFyZ0MgfSBmcm9tIFwiLi90eXBlcy9JQXJnQ1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZ1bmNUZW1wbGF0ZShcclxuICByZXM6IGFueSxcclxuICBhcmdBOiBJQXJnQSxcclxuICBhcmdCOiBJQXJnQjxUZW1wbGF0ZT4sXHJcbiAgYXJnQzogSUFyZ0M8VGVtcGxhdGU+XHJcbikge1xyXG4gIGlmIChyZXMgIT0gbnVsbCkgcmV0dXJuIHJlcztcclxuICBpZiAoIShhcmdBIGluc3RhbmNlb2YgVGVtcGxhdGUpKSByZXR1cm4gcmVzO1xyXG5cclxuICBpZiAoYXJnQikge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnQikpIHtcclxuICAgICAgYXJnQi5mb3JFYWNoKChjaGlsZCkgPT4gYXJnQS5hZGRDaGlsZChjaGlsZCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXJnQS5hcHBseVN0cnVjdChhcmdCKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBhcmdBO1xyXG59XHJcbiIsImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uLy4uL2NvcmUvVGVtcGxhdGUvVGVtcGxhdGVcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uL2NvcmUvQ29tcG9uZW50L0NvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBnZW5lcmF0ZVVVSUQgfSBmcm9tIFwiLi4vLi4vY29yZS91dGlscy9nZW5lcmVVVUlEXCI7XHJcbmltcG9ydCB7IENzcyB9IGZyb20gXCIuLi8uLi9jb3JlXCI7XHJcbmltcG9ydCB7IFN0eWxlU3RydWN0IH0gZnJvbSBcIi4uLy4uL2NvcmUvQ3NzL1N0eWxlU3RydWN0XCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBmdW5jQ29tcG9uZW50KFxyXG4gIGFyZ0E6IHN0cmluZyxcclxuICBhcmdCOiAoYXJnPzogUmVjb3JkPHN0cmluZywgYW55PikgPT4gVGVtcGxhdGVcclxuKSB7XHJcbiAgaWYgKGFyZ0Euc3RhcnRzV2l0aChcIltcIikpIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudE1hdGNoID0gYXJnQS5tYXRjaCgvXFxbKC58KStcXF0vZyk7XHJcbiAgICBpZiAoY29tcG9uZW50TWF0Y2ggIT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBjb21wb25lbnROYW1lID0gY29tcG9uZW50TWF0Y2hbMF0ucmVwbGFjZSgvXFxbfFxcXS9nLCBcIlwiKTtcclxuXHJcbiAgICAgIGNvbnN0IGlkID0gXCJhXCIgKyBnZW5lcmF0ZVVVSUQoKTtcclxuICAgICAgcmV0dXJuIChhcmdzPzogUmVjb3JkPHN0cmluZywgYW55PikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNzcyA9IG5ldyBDc3MoaWQpO1xyXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gYXJnQih7XHJcbiAgICAgICAgICBhcmdzOiBhcmdzLFxyXG4gICAgICAgICAgc3R5bGU6IChzdHJ1Y3Q6IFN0eWxlU3RydWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNzcy5zZXRTdHlsZVN0cnVjdChzdHJ1Y3QpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjc3MudXNlKHRlbXBsYXRlKTtcclxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBuZXcgQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIHRlbXBsYXRlKTtcclxuICAgICAgICBjb21wb25lbnQuc2V0Q29tcG9uZW50SWQoaWQpO1xyXG4gICAgICAgIHJldHVybiBjb21wb25lbnQ7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElBcmdBIH0gZnJvbSBcIi4uL3R5cGVzL0lBcmdBXCI7XHJcbmltcG9ydCB7IElBcmdBU3RyaW5nIH0gZnJvbSBcIi4uL3R5cGVzL0lBcmdBU3RyaW5nXCI7XHJcbmltcG9ydCB7IElBcmdCIH0gZnJvbSBcIi4uL3R5cGVzL0lBcmdCXCI7XHJcbmltcG9ydCB7IElBcmdDIH0gZnJvbSBcIi4uL3R5cGVzL0lBcmdDXCI7XHJcbmltcG9ydCB7IHN0cmluZ0lkIH0gZnJvbSBcIi4vc3RyaW5nSWRcIjtcclxuaW1wb3J0IHsgc3RyaW5nQ2xhc3MgfSBmcm9tIFwiLi9zdHJpbmdDbGFzc1wiO1xyXG5pbXBvcnQgeyBzdHJpbmdRdWVyeSB9IGZyb20gXCIuL3N0cmluZ1F1ZXJ5XCI7XHJcbmltcG9ydCB7IHN0cmluZ1F1ZXJ5QWxsIH0gZnJvbSBcIi4vc3RyaW5nUXVlcnlBbGxcIjtcclxuaW1wb3J0IHsgc3RyaW5nQXR0cmlidXRlcyB9IGZyb20gXCIuL3N0cmluZ0F0dHJpYnV0ZXNcIjtcclxuaW1wb3J0IHsgVGVtcGxhdGVGdW5jdGlvbiB9IGZyb20gXCIuLi9UZW1wbGF0ZUZ1bmNcIjtcclxuaW1wb3J0IHsgc3RyaW5nVGFnIH0gZnJvbSBcIi4vc3RyaW5nVGFnXCI7XHJcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uLy4uL2NvcmUvVGVtcGxhdGUvVGVtcGxhdGVcIjtcclxuaW1wb3J0IHsgSUNoaWxkU3RydWN0IH0gZnJvbSBcIi4uLy4uL2NvcmUvVGVtcGxhdGUvdHlwZXMvSUNoaWxkU3RydWN0XCI7XHJcbmltcG9ydCB7IHN0cmluZ0JvZHkgfSBmcm9tIFwiLi9zdHJpbmdCb2R5XCI7XHJcbmltcG9ydCB7IHN0cmluZ0hlYWQgfSBmcm9tIFwiLi9zdHJpbmdIZWFkXCI7XHJcbmltcG9ydCB7IGZ1bmNDb21wb25lbnQgfSBmcm9tIFwiLi9mdW5jQ29tcG9uZW50XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZnVuY1N0cmluZyhcclxuICByZXM6IGFueSxcclxuICBhcmdBOiBJQXJnQSxcclxuICBhcmdCOiBJQXJnQjxJQXJnQVN0cmluZz4sXHJcbiAgYXJnQzogSUFyZ0M8SUFyZ0FTdHJpbmc+XHJcbikge1xyXG4gIGlmIChyZXMgIT0gbnVsbCkgcmV0dXJuIHJlcztcclxuICBpZiAodHlwZW9mIGFyZ0EgIT0gXCJzdHJpbmdcIikgcmV0dXJuIHJlcztcclxuXHJcbiAgbGV0IGNvbXBvbmVudDogYW55O1xyXG4gIGlmICgoY29tcG9uZW50ID0gZnVuY0NvbXBvbmVudChhcmdBLCBhcmdCIGFzICgpID0+IFRlbXBsYXRlKSkpXHJcbiAgICByZXR1cm4gY29tcG9uZW50O1xyXG5cclxuICBjb25zdCBzZWxlY3RvciA9IGFyZ0EucmVwbGFjZSgvXFwoKC58KStcXCkvZywgXCJcIikucmVwbGFjZSgvXFxbKC58KStcXF0vZywgXCJcIik7XHJcbiAgbGV0IF9yZXMgPSBudWxsO1xyXG4gIF9yZXMgPSBzdHJpbmdCb2R5KF9yZXMsIHNlbGVjdG9yKTtcclxuICBfcmVzID0gc3RyaW5nSGVhZChfcmVzLCBzZWxlY3Rvcik7XHJcbiAgX3JlcyA9IHN0cmluZ0lkKF9yZXMsIHNlbGVjdG9yKTtcclxuICBfcmVzID0gc3RyaW5nUXVlcnkoX3Jlcywgc2VsZWN0b3IpO1xyXG4gIF9yZXMgPSBzdHJpbmdDbGFzcyhfcmVzLCBzZWxlY3Rvcik7XHJcbiAgX3JlcyA9IHN0cmluZ1F1ZXJ5QWxsKF9yZXMsIHNlbGVjdG9yKTtcclxuICBfcmVzID0gc3RyaW5nVGFnKF9yZXMsIHNlbGVjdG9yKTtcclxuXHJcbiAgaWYgKF9yZXMgPT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KF9yZXMpIHx8IHR5cGVvZiBfcmVzICE9IFwib2JqZWN0XCIpXHJcbiAgICByZXR1cm4gcmVzO1xyXG5cclxuICBzdHJpbmdBdHRyaWJ1dGVzKF9yZXMsIGFyZ0EsIGFyZ0IpO1xyXG5cclxuICBpZiAoL1xcWygufCkrXFxdL2cudGVzdChhcmdBKSkge1xyXG4gICAgcmV0dXJuIFRlbXBsYXRlRnVuY3Rpb24oX3JlcyBhcyBUZW1wbGF0ZSwgYXJnQyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gVGVtcGxhdGVGdW5jdGlvbihfcmVzIGFzIFRlbXBsYXRlLCBhcmdCIGFzIElDaGlsZFN0cnVjdFtdKTtcclxufVxyXG4iLCJpbXBvcnQgeyBJQXJnQVN0cmluZyB9IGZyb20gXCIuLi90eXBlcy9JQXJnQVN0cmluZ1wiO1xyXG5pbXBvcnQgeyBJQXJnQiB9IGZyb20gXCIuLi90eXBlcy9JQXJnQlwiO1xyXG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi8uLi9jb3JlL1RlbXBsYXRlL1RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IElFdmVudEZ1bmMgfSBmcm9tIFwiLi4vLi4vY29yZS9UZW1wbGF0ZS90eXBlcy9JRXZlbnRGdW5jXCI7XHJcblxyXG5mdW5jdGlvbiBtYWN0aEF0dHJpYnV0ZSh0ZXh0OiBzdHJpbmcsIHJlZ2V4OiBSZWdFeHAsIHJlcGxhY2U6IHN0cmluZykge1xyXG4gIGNvbnN0IG1hY3RoID0gdGV4dC5tYXRjaChyZWdleCk7XHJcbiAgaWYgKG1hY3RoID09IG51bGwpIHJldHVybjtcclxuICByZXR1cm4gbWFjdGhbMF0ucmVwbGFjZShyZXBsYWNlLCBcIlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ0F0dHJpYnV0ZXMoXHJcbiAgdGVtcGxhdGU6IFRlbXBsYXRlLFxyXG4gIGFyZ0E6IHN0cmluZyxcclxuICBhcmdCOiBJQXJnQjxJQXJnQVN0cmluZz5cclxuKSB7XHJcbiAgY29uc3QgYXR0cmlidXJlc01hY3RoID0gYXJnQS5tYXRjaCgvXFwoKC58KStcXCkvZyk7XHJcbiAgY29uc3QgZXZlbnRzTWFjdGggPSBhcmdBLm1hdGNoKC9cXFsoLnwpK1xcXS9nKTtcclxuXHJcbiAgaWYgKGF0dHJpYnVyZXNNYWN0aCkge1xyXG4gICAgY29uc3QgYXR0cmkgPSBhdHRyaWJ1cmVzTWFjdGhbMF0ucmVwbGFjZSgvXFwofFxcKS9nLCBcIlwiKTtcclxuXHJcbiAgICBjb25zdCBpZCA9IG1hY3RoQXR0cmlidXRlKGF0dHJpLCAvaWQ9W2EtekEtWjAtOV9dKy9nLCBcImlkPVwiKTtcclxuICAgIGlmIChpZCkgdGVtcGxhdGUuaWQuc2V0SWQoaWQpO1xyXG5cclxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IG1hY3RoQXR0cmlidXRlKGF0dHJpLCAvY2xhc3M9W2EtekEtWjAtOV8vXSsvZywgXCJjbGFzcz1cIik7XHJcbiAgICBpZiAoY2xhc3NOYW1lKSB0ZW1wbGF0ZS5jbGFzc0xpc3QuYWRkQ2xhc3NMaXN0KGNsYXNzTmFtZS5zcGxpdChcIi9cIikpO1xyXG5cclxuICAgIGNvbnN0IGlubmVySFRNTCA9IG1hY3RoQXR0cmlidXRlKGF0dHJpLCAvJj1bYS16QS1aMC05X10rL2csIFwiJj1cIik7XHJcbiAgICBpZiAoaW5uZXJIVE1MKSB0ZW1wbGF0ZS5zZXRJbm5lckhUTUwoaW5uZXJIVE1MKTtcclxuICB9XHJcblxyXG4gIGlmIChldmVudHNNYWN0aCAmJiAhYXJnQS5zdGFydHNXaXRoKFwiW1wiKSkge1xyXG4gICAgY29uc3QgZXZlbnRzID0gZXZlbnRzTWFjdGhbMF0ucmVwbGFjZSgvXFxbfFxcXS9nLCBcIlwiKS5zcGxpdChcIixcIik7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICBBcnJheS5pc0FycmF5KGFyZ0IpICYmXHJcbiAgICAgIGFyZ0IubGVuZ3RoID4gMCAmJlxyXG4gICAgICB0eXBlb2YgYXJnQlswXSA9PSBcImZ1bmN0aW9uXCJcclxuICAgICkge1xyXG4gICAgICBhcmdCLmZvckVhY2goKGl0ZW0sIGlkeCkgPT4ge1xyXG4gICAgICAgIHRlbXBsYXRlLmV2ZW50cy5hZGRFdmVudChcclxuICAgICAgICAgIGV2ZW50c1tpZHhdIGFzIGtleW9mIChIVE1MRWxlbWVudEV2ZW50TWFwICYgU1ZHRWxlbWVudEV2ZW50TWFwKSxcclxuICAgICAgICAgIGl0ZW0gYXMgSUV2ZW50RnVuYzxrZXlvZiAoSFRNTEVsZW1lbnRFdmVudE1hcCAmIFNWR0VsZW1lbnRFdmVudE1hcCk+XHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBhcmdCID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICB0ZW1wbGF0ZS5ldmVudHMuYWRkRXZlbnQoXHJcbiAgICAgICAgZXZlbnRzWzBdIGFzIGtleW9mIChIVE1MRWxlbWVudEV2ZW50TWFwICYgU1ZHRWxlbWVudEV2ZW50TWFwKSxcclxuICAgICAgICBhcmdCIGFzIElFdmVudEZ1bmM8a2V5b2YgKEhUTUxFbGVtZW50RXZlbnRNYXAgJiBTVkdFbGVtZW50RXZlbnRNYXApPlxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi8uLi9jb3JlL1RlbXBsYXRlL1RlbXBsYXRlXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nQm9keShyZXM6IGFueSwgc2VsZWN0b3I6IHN0cmluZykge1xyXG4gIGlmIChyZXMgIT0gbnVsbCkgcmV0dXJuIHJlcztcclxuICBpZiAoc2VsZWN0b3IgIT0gXCJib2R5XCIpIHJldHVybiByZXM7XHJcbiAgcmV0dXJuIG5ldyBUZW1wbGF0ZShkb2N1bWVudC5ib2R5KTtcclxufVxyXG4iLCJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi8uLi9jb3JlL1RlbXBsYXRlL1RlbXBsYXRlXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nQ2xhc3MocmVzOiBhbnksIHNlbGVjdG9yOiBzdHJpbmcpIHtcclxuICBpZiAocmVzICE9IG51bGwpIHJldHVybiByZXM7XHJcbiAgaWYgKCFzZWxlY3Rvci5zdGFydHNXaXRoKFwiLlwiKSkgcmV0dXJuIHJlcztcclxuXHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoc2VsZWN0b3IucmVwbGFjZShcIi5cIiwgXCJcIikpO1xyXG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgRWxlbWVudCBub3QgZm91bmQ6ICR7c2VsZWN0b3J9YCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50KS5tYXAoXHJcbiAgICAoX2VsZW1lbnQpID0+IG5ldyBUZW1wbGF0ZShfZWxlbWVudCBhcyBIVE1MRWxlbWVudClcclxuICApO1xyXG59XHJcbiIsImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uLy4uL2NvcmUvVGVtcGxhdGUvVGVtcGxhdGVcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdIZWFkKHJlczogYW55LCBzZWxlY3Rvcjogc3RyaW5nKSB7XHJcbiAgaWYgKHJlcyAhPSBudWxsKSByZXR1cm4gcmVzO1xyXG4gIGlmIChzZWxlY3RvciAhPSBcImhlYWRcIikgcmV0dXJuIHJlcztcclxuICByZXR1cm4gbmV3IFRlbXBsYXRlKGRvY3VtZW50LmhlYWQpO1xyXG59XHJcbiIsImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uLy4uL2NvcmUvVGVtcGxhdGUvVGVtcGxhdGVcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdJZChyZXM6IGFueSwgc2VsZWN0b3I6IHN0cmluZykge1xyXG4gIGlmIChyZXMgIT0gbnVsbCkgcmV0dXJuIHJlcztcclxuICBpZiAoIXNlbGVjdG9yLnN0YXJ0c1dpdGgoXCIjXCIpKSByZXR1cm4gcmVzO1xyXG5cclxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IucmVwbGFjZShcIiNcIiwgXCJcIikpO1xyXG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgRWxlbWVudCBub3QgZm91bmQ6ICR7c2VsZWN0b3J9YCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShlbGVtZW50KTtcclxuXHJcbiAgcmV0dXJuIHRlbXBsYXRlO1xyXG59XHJcbiIsImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uLy4uL2NvcmUvVGVtcGxhdGUvVGVtcGxhdGVcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1F1ZXJ5KHJlczogYW55LCBzZWxlY3Rvcjogc3RyaW5nKSB7XHJcbiAgaWYgKHJlcyAhPSBudWxsKSByZXR1cm4gcmVzO1xyXG4gIGlmICghc2VsZWN0b3Iuc3RhcnRzV2l0aChcInE6XCIpKSByZXR1cm4gcmVzO1xyXG5cclxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvci5yZXBsYWNlKFwicTpcIiwgXCJcIikpO1xyXG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgRWxlbWVudCBub3QgZm91bmQ6ICR7c2VsZWN0b3J9YCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbmV3IFRlbXBsYXRlKGVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpO1xyXG59XHJcbiIsImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uLy4uL2NvcmUvVGVtcGxhdGUvVGVtcGxhdGVcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdRdWVyeUFsbChyZXM6IGFueSwgc2VsZWN0b3I6IHN0cmluZykge1xyXG4gIGlmIChyZXMgIT0gbnVsbCkgcmV0dXJuIHJlcztcclxuICBpZiAoIXNlbGVjdG9yLnN0YXJ0c1dpdGgoXCJxQWxsOlwiKSkgcmV0dXJuIHJlcztcclxuXHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IucmVwbGFjZShcInFBbGw6XCIsIFwiXCIpKTtcclxuICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVsZW1lbnQgbm90IGZvdW5kOiAke3NlbGVjdG9yfWApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudCkubWFwKFxyXG4gICAgKF9lbGVtZW50KSA9PiBuZXcgVGVtcGxhdGUoX2VsZW1lbnQgYXMgSFRNTEVsZW1lbnQpXHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi8uLi9jb3JlL1RlbXBsYXRlL1RlbXBsYXRlXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVGFnKHJlczogYW55LCBzZWxlY3Rvcjogc3RyaW5nKSB7XHJcbiAgaWYgKHJlcyAhPSBudWxsKSByZXR1cm4gcmVzO1xyXG5cclxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChzZWxlY3Rvci50cmltKCkpO1xyXG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgRWxlbWVudCBub3QgZm91bmQ6ICR7c2VsZWN0b3J9YCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbmV3IFRlbXBsYXRlKGVsZW1lbnQpO1xyXG59XHJcbiIsImltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uL1RlbXBsYXRlL1RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gXCIuLi91dGlscy9nZW5lcmVVVUlEXCI7XHJcbmV4cG9ydCBjbGFzcyBDb21wb25lbnQge1xyXG4gIHB1YmxpYyBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyB1dWlkOiBzdHJpbmc7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZywgcHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZSkge1xyXG4gICAgdGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XHJcbiAgfVxyXG4gIHNldENvbXBvbmVudElkKGlkOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVGVtcGxhdGVGdW5jdGlvbiB9IGZyb20gXCIuLi8uLi9UZW1wbGF0ZUZ1bmMvVGVtcGxhdGVGdW5jXCI7XHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSBcIi4uL1N0YXRlXCI7XHJcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uL1RlbXBsYXRlL1RlbXBsYXRlXCI7XHJcbmltcG9ydCB7IElEeW5hbWljU3RhdGljT2JqZWN0IH0gZnJvbSBcIi4uL1RlbXBsYXRlL3R5cGVzL0lEeW5hbWljU3RhdGljT2JqZWN0XCI7XHJcbmltcG9ydCB7IGdldFN0eWxlSW5mbyB9IGZyb20gXCIuL2dldFN0eWxlSW5mb1wiO1xyXG5pbXBvcnQgeyBJUGF0aCB9IGZyb20gXCIuL0lQYXRoXCI7XHJcbmltcG9ydCB7IElTdHlsZUluZm8gfSBmcm9tIFwiLi9JU3R5bGVJbmZvXCI7XHJcbmltcG9ydCB7IHByb2Nlc3NTdHlsZUtleSB9IGZyb20gXCIuL3Byb2Nlc3NTdHlsZUtleVwiO1xyXG5pbXBvcnQgeyBTdHlsZVN0cnVjdCB9IGZyb20gXCIuL1N0eWxlU3RydWN0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ3NzIHtcclxuICBzdGF0aWMgdGVtcGxhdGUgPSBUZW1wbGF0ZUZ1bmN0aW9uKFwic3R5bGVcIik7XHJcbiAgc3RhdGljIGR5bmFtaWNUZW1wbGF0ZTogUmVjb3JkPHN0cmluZywgVGVtcGxhdGU+ID0ge307XHJcbiAgc3RhdGljIGNvbXBvbmVudEluZm86IFJlY29yZDxzdHJpbmcsIElTdHlsZUluZm8+ID0ge307XHJcblxyXG4gIHN0cnVjdD86IFN0eWxlU3RydWN0O1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb21wb25lbnRJZDogc3RyaW5nKSB7fVxyXG4gIHNldFN0eWxlU3RydWN0KHN0cnVjdDogU3R5bGVTdHJ1Y3QpIHtcclxuICAgIHRoaXMuc3RydWN0ID0gc3RydWN0O1xyXG4gIH1cclxuICBtZW1vcnk6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcclxuICBnZXRGcm9tUGF0aChwYXRoOiBzdHJpbmcpOiBTdHlsZVN0cnVjdCB7XHJcbiAgICBpZiAodGhpcy5tZW1vcnlbcGF0aF0pIHJldHVybiB0aGlzLm1lbW9yeVtwYXRoXTtcclxuICAgIGlmIChwYXRoID09IFwiXCIpIHJldHVybiB0aGlzLnN0cnVjdCBhcyBTdHlsZVN0cnVjdDtcclxuICAgIGNvbnN0IHNwbGl0ID0gcGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKCh4KSA9PiB4Lmxlbmd0aCA+IDApO1xyXG4gICAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICB0aGlzLm1lbW9yeVtzcGxpdFswXV0gPSAoKHRoaXMuc3RydWN0IGFzIFN0eWxlU3RydWN0KS5fIGFzIFN0eWxlU3RydWN0KVtcclxuICAgICAgICBzcGxpdFswXVxyXG4gICAgICBdO1xyXG4gICAgICByZXR1cm4gdGhpcy5tZW1vcnlbc3BsaXRbMF1dO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZhbHVlID0gc3BsaXQucG9wKCk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB0aGlzLmdldEZyb21QYXRoKHNwbGl0LmpvaW4oXCIvXCIpKVtcIl9cIl0gYXMgUmVjb3JkPHN0cmluZywgU3R5bGVTdHJ1Y3Q+XHJcbiAgICApW3ZhbHVlIGFzIHN0cmluZ107XHJcbiAgfVxyXG5cclxuICBjcmVhdGVTdHlsZShkYXRhOiBJUGF0aCkge1xyXG4gICAgY29uc3QgY3VycmVudCA9IFtkYXRhXTtcclxuXHJcbiAgICB3aGlsZSAoY3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IHBhdGggPSBjdXJyZW50LnBvcCgpIGFzIElQYXRoO1xyXG4gICAgICBpZiAocGF0aC5zdGF0ZXNLZXlzKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBUZW1wbGF0ZUZ1bmN0aW9uKHtcclxuICAgICAgICAgIHRhZzogXCJzdHlsZVwiLFxyXG4gICAgICAgICAgaW5uZXJIVE1MOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgcGF0aC5jbGFzc05hbWUgK1xyXG4gICAgICAgICAgICAgIFwiIHtcXG5cIiArXHJcbiAgICAgICAgICAgICAgcGF0aC5zdGF0ZXNLZXlzXHJcbiAgICAgICAgICAgICAgICA/Lm1hcChcclxuICAgICAgICAgICAgICAgICAgKGl0ZW0pID0+XHJcbiAgICAgICAgICAgICAgICAgICAgYCR7cHJvY2Vzc1N0eWxlS2V5KGl0ZW0pfTokeyhcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RnJvbVBhdGgocGF0aC5wYXRoLnN1YnN0cmluZygxKSlbaXRlbV0gYXMgU3RhdGVcclxuICAgICAgICAgICAgICAgICAgICApLmdldFN0cmluZygpfTtgXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAuam9pbihcIlxcblwiKSArXHJcbiAgICAgICAgICAgICAgXCJcXG59XCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB3YXRjaFNhdGVzOiBwYXRoLnN0YXRlc0tleXMubWFwKFxyXG4gICAgICAgICAgICAoaXRlbSkgPT4gdGhpcy5nZXRGcm9tUGF0aChwYXRoLnBhdGguc3Vic3RyaW5nKDEpKVtpdGVtXSBhcyBTdGF0ZVxyXG4gICAgICAgICAgKSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoQ3NzLmR5bmFtaWNUZW1wbGF0ZVtwYXRoLmNsYXNzTmFtZV0gPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBDc3MuZHluYW1pY1RlbXBsYXRlW3BhdGguY2xhc3NOYW1lXSA9IHRlbXBsYXRlO1xyXG4gICAgICAgICAgVGVtcGxhdGVGdW5jdGlvbihcImhlYWRcIiwgW3RlbXBsYXRlXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocGF0aC5jaGlsZHMpIHtcclxuICAgICAgICBjdXJyZW50LnB1c2goLi4ucGF0aC5jaGlsZHMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBiaW5kKHRlbXBsYXRlOiBUZW1wbGF0ZSwgZGF0YTogSVN0eWxlSW5mbykge1xyXG4gICAgaWYgKGRhdGEucGF0aC5zdGF0ZXNLZXlzICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCBzdHlsZTogSUR5bmFtaWNTdGF0aWNPYmplY3Q8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4gPSB7fTtcclxuICAgICAgZm9yIChjb25zdCBzdGF0ZWtleSBvZiBkYXRhLnBhdGguc3RhdGVzS2V5cykge1xyXG4gICAgICAgIHN0eWxlW3Byb2Nlc3NTdHlsZUtleShzdGF0ZWtleSldID0gdGhpcy5nZXRGcm9tUGF0aChkYXRhLnBhdGgucGF0aClbXHJcbiAgICAgICAgICBzdGF0ZWtleVxyXG4gICAgICAgIF0gYXMgU3RhdGU7XHJcbiAgICAgIH1cclxuICAgICAgdGVtcGxhdGUuc3R5bGUuZHluYW1pY1N0eWxlKHN0eWxlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YS5wYXRoLmNoaWxkcykge1xyXG4gICAgICBkYXRhLnBhdGguY2hpbGRzLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVTdHlsZShjaGlsZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXNlKHRlbXBsYXRlOiBUZW1wbGF0ZSkge1xyXG4gICAgaWYgKCF0aGlzLnN0cnVjdCkgcmV0dXJuO1xyXG4gICAgaWYgKENzcy5jb21wb25lbnRJbmZvW3RoaXMuY29tcG9uZW50SWRdKSB7XHJcbiAgICAgIHRoaXMuYmluZCh0ZW1wbGF0ZSwgQ3NzLmNvbXBvbmVudEluZm9bdGhpcy5jb21wb25lbnRJZF0pO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBkYXRhID0gZ2V0U3R5bGVJbmZvKHRoaXMuc3RydWN0LCBcIi5cIiArIHRoaXMuY29tcG9uZW50SWQpO1xyXG4gICAgdGVtcGxhdGUuY2xhc3NMaXN0LmFkZENsYXNzTmFtZSh0aGlzLmNvbXBvbmVudElkKTtcclxuICAgIENzcy50ZW1wbGF0ZS5zZXRJbm5lckhUTUwoXHJcbiAgICAgIENzcy50ZW1wbGF0ZS5nZXRJbm5lckhUTUwoKSArIFwiXFxuXCIgKyBkYXRhLnN0YXRpY1N0eWxlc1xyXG4gICAgKTtcclxuICAgIHRoaXMuYmluZCh0ZW1wbGF0ZSwgZGF0YSk7XHJcbiAgICBDc3MuY29tcG9uZW50SW5mb1t0aGlzLmNvbXBvbmVudElkXSA9IGRhdGE7XHJcbiAgfVxyXG59XHJcblxyXG5pZiAoXHJcbiAgVGVtcGxhdGVGdW5jdGlvbihcImhlYWRcIikuY2hpbGRzLmZpbHRlcihcclxuICAgIChpdGVtKSA9PiBpdGVtLnV1aWQgPT0gQ3NzLnRlbXBsYXRlLnV1aWRcclxuICApLmxlbmd0aCA9PSAwXHJcbikge1xyXG4gIFRlbXBsYXRlRnVuY3Rpb24oXCJoZWFkXCIpLmFkZENoaWxkKENzcy50ZW1wbGF0ZSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgU3RhdGUgfSBmcm9tIFwiLi4vU3RhdGVcIjtcclxuaW1wb3J0IHsgcHJvY2Vzc1N0eWxlS2V5IH0gZnJvbSBcIi4vcHJvY2Vzc1N0eWxlS2V5XCI7XHJcbmltcG9ydCB7IFN0eWxlU3RydWN0IH0gZnJvbSBcIi4vU3R5bGVTdHJ1Y3RcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0ZXNBbmRTdHlsZShcclxuICBzdHJ1Y3Q6IFN0eWxlU3RydWN0LFxyXG4gIGNvbnRleHQ6IHsgdGV4dDogc3RyaW5nOyBzdGF0ZXNLZXlzOiBzdHJpbmdbXSB9LFxyXG4gIGNsYXNzTmFtZVBhdGg6IHN0cmluZ1xyXG4pIHtcclxuICBjb25zdCBzdHJ1Y3RLZXlzOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKHN0cnVjdCk7XHJcblxyXG4gIGNvbnRleHQudGV4dCArPSBjbGFzc05hbWVQYXRoICsgXCIge1xcblwiO1xyXG5cclxuICBzdHJ1Y3RLZXlzLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgaWYgKHN0cnVjdFtrZXldID09IHVuZGVmaW5lZCB8fCBrZXkgPT0gXCJfXCIpIHJldHVybjtcclxuICAgIGNvbnN0IHZhbHVlID0gc3RydWN0W2tleV07XHJcblxyXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgU3RhdGUpIHtcclxuICAgICAgY29udGV4dC5zdGF0ZXNLZXlzLnB1c2goa2V5KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRleHQudGV4dCArPSBgJHtwcm9jZXNzU3R5bGVLZXkoa2V5KX06ICR7dmFsdWV9O1xcbmA7XHJcbiAgfSk7XHJcbiAgY29udGV4dC50ZXh0ICs9IFwifVxcblwiO1xyXG5cclxuICBpZiAoXHJcbiAgICBzdHJ1Y3RLZXlzLmZpbHRlcigoaXRlbSkgPT4gY29udGV4dC5zdGF0ZXNLZXlzLmluZGV4T2YoaXRlbSkgPT0gLTEpXHJcbiAgICAgIC5sZW5ndGggPT0gMFxyXG4gICkge1xyXG4gICAgY29udGV4dC50ZXh0ID0gXCJcIjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU3R5bGVTdHJ1Y3QgfSBmcm9tIFwiLi9TdHlsZVN0cnVjdFwiO1xyXG5pbXBvcnQgeyBzdHJ1Y3REYXRhIH0gZnJvbSBcIi4vc3RydWN0RGF0YVwiO1xyXG5pbXBvcnQgeyBJUGF0aCB9IGZyb20gXCIuL0lQYXRoXCI7XHJcbmltcG9ydCB7IElTdHlsZUluZm8gfSBmcm9tIFwiLi9JU3R5bGVJbmZvXCI7XHJcbmltcG9ydCB7IGdldFN0YXRlc0FuZFN0eWxlIH0gZnJvbSBcIi4vZ2V0U3RhdGVzQW5kU3R5bGVcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlSW5mbyhcclxuICBzdHJ1Y3Q6IFN0eWxlU3RydWN0LFxyXG4gIGNsYXNzTmFtZVBhdGg6IHN0cmluZyxcclxuICBjb250ZXh0OiBzdHJ1Y3REYXRhID0ge1xyXG4gICAgc3RhdGljU3R5bGVzOiBbXSxcclxuICB9LFxyXG4gIHBhdGg6IElQYXRoID0geyBuYW1lOiBcIlwiLCBwYXRoOiBcIlwiLCBjbGFzc05hbWU6IFwiXCIgfVxyXG4pOiBJU3R5bGVJbmZvIHtcclxuICBjb25zdCBzdWJDb250ZXh0OiB7IHRleHQ6IHN0cmluZzsgc3RhdGVzS2V5czogc3RyaW5nW10gfSA9IHtcclxuICAgIHRleHQ6IFwiXCIsXHJcbiAgICBzdGF0ZXNLZXlzOiBbXSxcclxuICB9O1xyXG4gIGdldFN0YXRlc0FuZFN0eWxlKHN0cnVjdCwgc3ViQ29udGV4dCwgY2xhc3NOYW1lUGF0aCk7XHJcblxyXG4gIGNvbnN0IGR5bmFtaWNTdHlsZTogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgaWYgKHN1YkNvbnRleHQudGV4dC5sZW5ndGggPiAwKSB7XHJcbiAgICBkeW5hbWljU3R5bGUucHVzaChzdWJDb250ZXh0LnRleHQpO1xyXG4gICAgY29udGV4dC5zdGF0aWNTdHlsZXMucHVzaCguLi5keW5hbWljU3R5bGUpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHN1YkNvbnRleHQuc3RhdGVzS2V5cy5sZW5ndGggPiAwKSB7XHJcbiAgICBwYXRoLnN0YXRlc0tleXMgPSBzdWJDb250ZXh0LnN0YXRlc0tleXM7XHJcbiAgfVxyXG5cclxuICBwYXRoLmNsYXNzTmFtZSA9IGNsYXNzTmFtZVBhdGg7XHJcblxyXG4gIGNvbnN0IHN1YlN0cnVjdCA9IHN0cnVjdFtcIl9cIl07XHJcbiAgaWYgKCFzdWJTdHJ1Y3QpIHJldHVybiB7IHBhdGgsIHN0YXRpY1N0eWxlczogY29udGV4dC5zdGF0aWNTdHlsZXMuam9pbihcIlwiKSB9O1xyXG5cclxuICBjb25zdCBjaGlsZHM6IElQYXRoW10gPSBbXTtcclxuXHJcbiAgT2JqZWN0LmtleXMoc3ViU3RydWN0KS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgIGNvbnN0IGF1eCA9IGtleVxyXG4gICAgICAucmVwbGFjZSgvXFwkXFxfL2csIFwiLVwiKVxyXG4gICAgICAucmVwbGFjZSgvXFwkL2csIFwiPiBcIilcclxuICAgICAgLnJlcGxhY2UoL19fL2csIFwiICNcIilcclxuICAgICAgLnJlcGxhY2UoL18vZywgXCIgLlwiKTtcclxuXHJcbiAgICBjb25zdCBzdWJQYXRoOiBJUGF0aCA9IHtcclxuICAgICAgbmFtZToga2V5LFxyXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVBhdGggKyBcIiBcIiArIGF1eCxcclxuICAgICAgcGF0aDogcGF0aC5wYXRoICsgXCIvXCIgKyBhdXgsXHJcbiAgICB9O1xyXG4gICAgZ2V0U3R5bGVJbmZvKHN1YlN0cnVjdFtrZXldLCBjbGFzc05hbWVQYXRoICsgXCIgXCIgKyBhdXgsIGNvbnRleHQsIHN1YlBhdGgpO1xyXG4gICAgaWYgKHN1YlBhdGguc3RhdGVzS2V5cykge1xyXG4gICAgICBjaGlsZHMucHVzaChzdWJQYXRoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgaWYgKGNoaWxkcy5sZW5ndGggPiAwKSB7XHJcbiAgICBwYXRoLmNoaWxkcyA9IGNoaWxkcztcclxuICB9XHJcblxyXG4gIHJldHVybiB7IHBhdGgsIHN0YXRpY1N0eWxlczogY29udGV4dC5zdGF0aWNTdHlsZXMuam9pbihcIlwiKSB9O1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzU3R5bGVLZXkoa2V5OiBzdHJpbmcpIHtcclxuICBjb25zdCBtYXRjaCA9IGtleS5tYXRjaCgvKFthLXpdW0EtWl0pL2cpO1xyXG5cclxuICBpZiAobWF0Y2ggIT0gbnVsbCkge1xyXG4gICAgbWF0Y2guZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBjb25zdCByZXBsYWNlVmFsdWUgPSBpdGVtWzBdICsgXCItXCIgKyBpdGVtWzFdLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIGtleSA9IGtleS5yZXBsYWNlKGl0ZW0sIHJlcGxhY2VWYWx1ZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBrZXk7XHJcbn1cclxuIiwiaW1wb3J0IHsgZ2VuZXJhdGVVVUlEIH0gZnJvbSBcIi4vdXRpbHMvZ2VuZXJlVVVJRFwiO1xyXG5pbXBvcnQgeyBCYXNlQ2xhc3MgfSBmcm9tIFwiLi91dGlscy9CYXNlQ2xhc3NcIjtcclxuaW1wb3J0IHsgZXF1YWwgfSBmcm9tIFwiLi91dGlscy9lcXVhbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXRlPFQgPSBhbnk+IGltcGxlbWVudHMgQmFzZUNsYXNzIHtcclxuICBwcml2YXRlIHV1aWQ6IHN0cmluZztcclxuICBwcml2YXRlIHVwZGF0ZUNhbGxiYWNrczogKCh2YWx1ZTogVCwgcHJlVmFsdWU6IFQpID0+IHZvaWQpW107XHJcbiAgcHJlZml4PzogKHZhbHVlOiBhbnkpID0+IHN0cmluZztcclxuXHJcbiAgX25hbWUgPSBcIlN0YXRlXCI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3ZhbHVlOiBUKSB7XHJcbiAgICB0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcclxuICAgIHRoaXMudXBkYXRlQ2FsbGJhY2tzID0gW107XHJcbiAgfVxyXG5cclxuICBvblVwZGF0ZShjYWxsYmFjazogKHZhbHVlOiBULCBwcmVWYWx1ZTogVCkgPT4gdm9pZCkge1xyXG4gICAgdGhpcy51cGRhdGVDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBzZXRQcmVmaXhTdHJpbmcoZnVuYzogKHZhbHVlOiBhbnkpID0+IHN0cmluZykge1xyXG4gICAgdGhpcy5wcmVmaXggPSBmdW5jO1xyXG4gIH1cclxuXHJcbiAgc2V0KHZhbHVlOiBUKSB7XHJcbiAgICBpZiAoZXF1YWwodGhpcy5fdmFsdWUsIHZhbHVlKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcHJldiA9IHRoaXMuX3ZhbHVlO1xyXG5cclxuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcblxyXG4gICAgdGhpcy51cGRhdGVDYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2spID0+IGNhbGxiYWNrKHZhbHVlLCBwcmV2KSk7XHJcbiAgfVxyXG5cclxuICBnZXQoKTogVCB7XHJcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgfVxyXG5cclxuICBnZXRTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLnByZWZpeCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wcmVmaXgodGhpcy5fdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFwiXCIgKyB0aGlzLl92YWx1ZTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSUR5bmFtaWNTdGF0aWNPYmplY3QgfSBmcm9tIFwiLi4vdHlwZXMvSUR5bmFtaWNTdGF0aWNPYmplY3RcIjtcclxuaW1wb3J0IHsgZHluYW1pY09iamVjdCB9IGZyb20gXCIuLi91dGlsL2R5bmFtaWNPYmplY3RcIjtcclxuaW1wb3J0IHsgQmFzZUNsYXNzIH0gZnJvbSBcIi4vQmFzZUNsYXNzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlcyBleHRlbmRzIEJhc2VDbGFzczxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiB7XHJcbiAgcHJvdGVjdGVkIGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcclxuXHJcbiAgc2V0QXR0cmlidXRlKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5kYXRhW25hbWVdID0gdmFsdWU7XHJcbiAgICB0aGlzLnRlbXBsYXRlLmVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUF0dHJpYnV0ZShuYW1lOiBzdHJpbmcpIHtcclxuICAgIGRlbGV0ZSB0aGlzLmRhdGFbbmFtZV07XHJcbiAgICB0aGlzLnRlbXBsYXRlLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG4gIH1cclxuXHJcbiAgc2V0QXR0cmlidXRlcyhkYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSB7XHJcbiAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoa2V5LCBkYXRhW2tleV0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVBdHRyaWJ1dGVzKGRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pIHtcclxuICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICB0aGlzLmRlbGV0ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkeW5hbWljQXR0cmlidXRlcyhkYXRhOiBJRHluYW1pY1N0YXRpY09iamVjdDxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pikge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpcztcclxuICAgIGR5bmFtaWNPYmplY3QodGhpcy50ZW1wbGF0ZSwgZGF0YSwge1xyXG4gICAgICBzZXRLZXkoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZXModmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgICBkZWxldGVLZXkoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5kZWxldGVBdHRyaWJ1dGUoa2V5KTtcclxuICAgICAgfSxcclxuICAgICAgZGVsZXRlVmFsdWUodmFsdWUpIHtcclxuICAgICAgICB0YXJnZXQuZGVsZXRlQXR0cmlidXRlcyh2YWx1ZSk7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tIFwiLi4vVGVtcGxhdGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXNlQ2xhc3M8VD4ge1xyXG4gIHByb3RlY3RlZCBkYXRhOiBUO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdGVtcGxhdGU6IFRlbXBsYXRlKSB7fVxyXG5cclxuICBnZXQoKTogVCB7XHJcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJRHluYW1pY1N0YXRpYyB9IGZyb20gXCIuLi90eXBlcy9JRHluYW1pY1N0YXRpY1wiO1xyXG5pbXBvcnQgeyBkeW5hbWljVmFsdWUgfSBmcm9tIFwiLi4vdXRpbC9keW5hbWljVmFsdWVcIjtcclxuaW1wb3J0IHsgQmFzZUNsYXNzIH0gZnJvbSBcIi4vQmFzZUNsYXNzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2xhc3NMaXN0IGV4dGVuZHMgQmFzZUNsYXNzPFNldDxzdHJpbmc+PiB7XHJcbiAgcHJvdGVjdGVkIGRhdGE6IFNldDxzdHJpbmc+ID0gbmV3IFNldDxzdHJpbmc+KCk7XHJcblxyXG4gIHRvZ2dsZUNsYXNzTmFtZShuYW1lOiBzdHJpbmcpIHtcclxuICAgIGlmICh0aGlzLmRhdGEuaGFzKG5hbWUpKSB7XHJcbiAgICAgIHRoaXMuZGF0YS5kZWxldGUobmFtZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRhdGEuYWRkKG5hbWUpO1xyXG4gICAgfVxyXG4gICAgdGhpcy50ZW1wbGF0ZS5lbGVtZW50LmNsYXNzTGlzdC50b2dnbGUobmFtZSk7XHJcbiAgfVxyXG5cclxuICBhZGRDbGFzc05hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmRhdGEuYWRkKG5hbWUpO1xyXG4gICAgdGhpcy50ZW1wbGF0ZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQobmFtZSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDbGFzc05hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmRhdGEuZGVsZXRlKG5hbWUpO1xyXG4gICAgdGhpcy50ZW1wbGF0ZS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XHJcbiAgfVxyXG5cclxuICBkeW5hbWljQ2xhc3NOYW1lKGRhdGE6IElEeW5hbWljU3RhdGljPHN0cmluZz4pIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXM7XHJcbiAgICBkeW5hbWljVmFsdWUoZGF0YSwgdGhpcy50ZW1wbGF0ZSwge1xyXG4gICAgICBkZWxldGVWYWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5yZW1vdmVDbGFzc05hbWUodmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5hZGRDbGFzc05hbWUodmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGRDbGFzc0xpc3QobmFtZXM6IHN0cmluZ1tdKSB7XHJcbiAgICBpZiAobmFtZXMubGVuZ3RoID09IDApIHJldHVybjtcclxuICAgIG5hbWVzLmZvckVhY2goKG5hbWUpID0+IHRoaXMuYWRkQ2xhc3NOYW1lKG5hbWUpKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNsYXNzTGlzdChuYW1lczogc3RyaW5nW10pIHtcclxuICAgIGlmIChuYW1lcy5sZW5ndGggPT0gMCkgcmV0dXJuO1xyXG4gICAgbmFtZXMuZm9yRWFjaCgobmFtZSkgPT4gdGhpcy5yZW1vdmVDbGFzc05hbWUobmFtZSkpO1xyXG4gIH1cclxuXHJcbiAgZHluYW1pY0NsYXNzTGlzdChkYXRhOiBJRHluYW1pY1N0YXRpYzxzdHJpbmdbXT4pIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXM7XHJcbiAgICBkeW5hbWljVmFsdWUoZGF0YSwgdGhpcy50ZW1wbGF0ZSwge1xyXG4gICAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5hZGRDbGFzc0xpc3QodmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgICBkZWxldGVWYWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5yZW1vdmVDbGFzc0xpc3QodmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VDbGFzcyB9IGZyb20gXCIuL0Jhc2VDbGFzc1wiO1xyXG5pbXBvcnQgeyBJRXZlbnRGdW5jIH0gZnJvbSBcIi4uL3R5cGVzL0lFdmVudEZ1bmNcIjtcclxuaW1wb3J0IHsgSUV2ZW50TWFwIH0gZnJvbSBcIi4uL3R5cGVzL0lFdmVudE1hcFwiO1xyXG5pbXBvcnQgeyBJRXZlbnRzRGF0YSB9IGZyb20gXCIuLi90eXBlcy9JRXZlbnRzRGF0YVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50cyBleHRlbmRzIEJhc2VDbGFzczxJRXZlbnRzRGF0YT4ge1xyXG4gIHByb3RlY3RlZCBkYXRhOiBJRXZlbnRzRGF0YSA9IHt9O1xyXG5cclxuICBhZGRFdmVudDxLIGV4dGVuZHMga2V5b2YgSUV2ZW50TWFwPihldmVudDogSywgZnVuYzogSUV2ZW50RnVuYzxLPikge1xyXG4gICAgdGhpcy5kYXRhW2V2ZW50XSA9IGZ1bmMuYmluZCh0aGlzKTtcclxuICAgIHRoaXMudGVtcGxhdGUuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCAoZW52OiBhbnkpID0+XHJcbiAgICAgIGZ1bmMuYmluZCh0aGlzLnRlbXBsYXRlKShlbnYpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgYWRkRXZlbnRzKGRhdGE6IElFdmVudHNEYXRhKSB7XHJcbiAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgdGhpcy5hZGRFdmVudChcclxuICAgICAgICBrZXkgYXMga2V5b2YgSUV2ZW50TWFwLFxyXG4gICAgICAgIGRhdGFba2V5IGFzIGtleW9mIElFdmVudE1hcF0gYXMgSUV2ZW50RnVuYzxrZXlvZiBJRXZlbnRNYXA+XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSUR5bmFtaWNTdGF0aWMgfSBmcm9tIFwiLi4vdHlwZXMvSUR5bmFtaWNTdGF0aWNcIjtcclxuaW1wb3J0IHsgZHluYW1pY1ZhbHVlIH0gZnJvbSBcIi4uL3V0aWwvZHluYW1pY1ZhbHVlXCI7XHJcbmltcG9ydCB7IEJhc2VDbGFzcyB9IGZyb20gXCIuL0Jhc2VDbGFzc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIElEIGV4dGVuZHMgQmFzZUNsYXNzPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xyXG4gIHByb3RlY3RlZCBkYXRhOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcblxyXG4gIHNldElkKGlkOiBzdHJpbmcpIHtcclxuICAgIGlmIChpZCA9PSBcIlwiKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuZGF0YSA9IGlkO1xyXG4gICAgdGhpcy50ZW1wbGF0ZS5lbGVtZW50LmlkID0gaWQ7XHJcbiAgfVxyXG5cclxuICBkeW5hbWljSWQoaWQ6IElEeW5hbWljU3RhdGljPHN0cmluZz4pIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXM7XHJcbiAgICBkeW5hbWljVmFsdWUoaWQsIHRoaXMudGVtcGxhdGUsIHtcclxuICAgICAgc2V0VmFsdWUodmFsdWUpIHtcclxuICAgICAgICB0YXJnZXQuc2V0SWQodmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgICBkZWxldGVWYWx1ZSgpIHt9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElEeW5hbWljU3RhdGljIH0gZnJvbSBcIi4uL3R5cGVzL0lEeW5hbWljU3RhdGljXCI7XHJcbmltcG9ydCB7IGR5bmFtaWNWYWx1ZSB9IGZyb20gXCIuLi91dGlsL2R5bmFtaWNWYWx1ZVwiO1xyXG5pbXBvcnQgeyBCYXNlQ2xhc3MgfSBmcm9tIFwiLi9CYXNlQ2xhc3NcIjtcclxuZXhwb3J0IGNsYXNzIFNob3cgZXh0ZW5kcyBCYXNlQ2xhc3M8Ym9vbGVhbj4ge1xyXG4gIGRhdGE6IGJvb2xlYW4gPSBmYWxzZTtcclxuICBzZXRTaG93KHNob3c6IGJvb2xlYW4pIHtcclxuICAgIGlmICh0aGlzLnRlbXBsYXRlLnBhcmVudCA9PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcbiAgICB0aGlzLmRhdGEgPSBzaG93O1xyXG5cclxuICAgIGlmIChzaG93KSB7XHJcbiAgICAgIGNvbnN0IGNoaWxkcyA9IHRoaXMudGVtcGxhdGUucGFyZW50LmNoaWxkcy5maWx0ZXIoXHJcbiAgICAgICAgKGl0ZW0pID0+IGl0ZW0uc2hvdyB8fCBpdGVtID09IHRoaXMudGVtcGxhdGVcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IGlkeCA9IGNoaWxkcy5pbmRleE9mKHRoaXMudGVtcGxhdGUpO1xyXG5cclxuICAgICAgaWYgKGNoaWxkcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUucGFyZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy50ZW1wbGF0ZS5lbGVtZW50KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpZHggPT0gMCkge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUucGFyZW50LmVsZW1lbnQuaW5zZXJ0QmVmb3JlKFxyXG4gICAgICAgICAgdGhpcy50ZW1wbGF0ZS5lbGVtZW50LFxyXG4gICAgICAgICAgY2hpbGRzWzFdLmVsZW1lbnRcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlkeCA9PSBjaGlsZHMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUucGFyZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy50ZW1wbGF0ZS5lbGVtZW50KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy50ZW1wbGF0ZS5wYXJlbnQuZWxlbWVudC5pbnNlcnRCZWZvcmUoXHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZS5lbGVtZW50LFxyXG4gICAgICAgIGNoaWxkc1tpZHggKyAxXS5lbGVtZW50XHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRlbXBsYXRlLnBhcmVudC5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMudGVtcGxhdGUuZWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICBkeW5hbWljU2hvdyhzaG93OiBJRHluYW1pY1N0YXRpYzxib29sZWFuPikge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpcztcclxuICAgIGR5bmFtaWNWYWx1ZShzaG93LCB0aGlzLnRlbXBsYXRlLCB7XHJcbiAgICAgIGRlbGV0ZVZhbHVlKCkge30sXHJcbiAgICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdGFyZ2V0LnNldFNob3codmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElEeW5hbWljU3RhdGljT2JqZWN0IH0gZnJvbSBcIi4uL3R5cGVzL0lEeW5hbWljU3RhdGljT2JqZWN0XCI7XHJcbmltcG9ydCB7IGR5bmFtaWNPYmplY3QgfSBmcm9tIFwiLi4vdXRpbC9keW5hbWljT2JqZWN0XCI7XHJcbmltcG9ydCB7IEJhc2VDbGFzcyB9IGZyb20gXCIuL0Jhc2VDbGFzc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0eWxlIGV4dGVuZHMgQmFzZUNsYXNzPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+IHtcclxuICBwcm90ZWN0ZWQgZGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xyXG5cclxuICByZW1vdmVTdHlsZShuYW1lOiBzdHJpbmcpIHtcclxuICAgIGRlbGV0ZSB0aGlzLmRhdGFbbmFtZV07XHJcbiAgICB0aGlzLnRlbXBsYXRlLmVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHNldFN0eWxlKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgbWF0Y2ggPSBuYW1lLm1hdGNoKC8oW2Etel1bQS1aXSkvZyk7XHJcbiAgICBpZiAobWF0Y2ggIT0gbnVsbCkge1xyXG4gICAgICBtYXRjaC5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVwbGFjZVZhbHVlID0gaXRlbVswXSArIFwiLVwiICsgaXRlbVsxXS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoaXRlbSwgcmVwbGFjZVZhbHVlKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5kYXRhW25hbWVdID0gdmFsdWU7XHJcbiAgICB0aGlzLnRlbXBsYXRlLmVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZHluYW1pY1N0eWxlKGRhdGE6IElEeW5hbWljU3RhdGljT2JqZWN0PFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzO1xyXG4gICAgZHluYW1pY09iamVjdCh0aGlzLnRlbXBsYXRlLCBkYXRhLCB7XHJcbiAgICAgIGRlbGV0ZUtleShrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdGFyZ2V0LnJlbW92ZVN0eWxlKGtleSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGRlbGV0ZVZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdGFyZ2V0LnJlbW92ZVN0eWxlcyh2YWx1ZSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNldEtleShrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdGFyZ2V0LnNldFN0eWxlKGtleSwgdmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5zZXRTdHlsZXModmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRTdHlsZXMoZGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPikge1xyXG4gICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U3R5bGUoa2V5LCBkYXRhW2tleV0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHJlbW92ZVN0eWxlcyhkYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSB7XHJcbiAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgdGhpcy5yZW1vdmVTdHlsZShrZXkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gXCIuLi91dGlscy9nZW5lcmVVVUlEXCI7XHJcbmltcG9ydCB7IEJhc2VDbGFzcyB9IGZyb20gXCIuLi91dGlscy9CYXNlQ2xhc3NcIjtcclxuaW1wb3J0IHsgQ2xhc3NMaXN0IH0gZnJvbSBcIi4vUHJvcGVydGllcy9DbGFzc0xpc3RcIjtcclxuaW1wb3J0IHsgU3R5bGUgfSBmcm9tIFwiLi9Qcm9wZXJ0aWVzL1N0eWxlXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZXMgfSBmcm9tIFwiLi9Qcm9wZXJ0aWVzL0F0dHJpYnV0ZXNcIjtcclxuaW1wb3J0IHsgRXZlbnRzIH0gZnJvbSBcIi4vUHJvcGVydGllcy9FdmVudHNcIjtcclxuaW1wb3J0IHsgSUQgfSBmcm9tIFwiLi9Qcm9wZXJ0aWVzL0lkXCI7XHJcbmltcG9ydCB7IGFkZENoaWxkIH0gZnJvbSBcIi4vYWRkQ2hpbGQvYWRkQ2hpbGRcIjtcclxuaW1wb3J0IHsgSUNoaWxkU3RydWN0IH0gZnJvbSBcIi4vdHlwZXMvSUNoaWxkU3RydWN0XCI7XHJcbmltcG9ydCB7IFVwZGF0ZUZ1bmN0aW9uIH0gZnJvbSBcIi4vVXBkYXRlRnVuY3Rpb25cIjtcclxuaW1wb3J0IHsgSUR5bmFtaWNTdGF0aWMgfSBmcm9tIFwiLi90eXBlcy9JRHluYW1pY1N0YXRpY1wiO1xyXG5pbXBvcnQgeyBkeW5hbWljVmFsdWUgfSBmcm9tIFwiLi91dGlsL2R5bmFtaWNWYWx1ZVwiO1xyXG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gXCIuLi9TdGF0ZVwiO1xyXG5pbXBvcnQgeyBTaG93IH0gZnJvbSBcIi4vUHJvcGVydGllcy9TaG93XCI7XHJcbmltcG9ydCB7IElEeW5hbWljVXBkYXRlU3RydWN0IH0gZnJvbSBcIi4vdHlwZXMvSUR5bmFtaWNVcGRhdGVTdHJ1Y3RcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4uL0NvbXBvbmVudC9Db21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZTxcclxuICBUIGV4dGVuZHMgSFRNTEVsZW1lbnQgfCBTVkdFbGVtZW50ID0gSFRNTEVsZW1lbnQgfCBTVkdFbGVtZW50XHJcbj4gaW1wbGVtZW50cyBCYXNlQ2xhc3Ncclxue1xyXG4gIHN0YXRpYyB0ZW1wbGF0ZXM6IE1hcDxIVE1MRWxlbWVudCB8IFNWR0VsZW1lbnQsIFRlbXBsYXRlPiA9IG5ldyBNYXAoKTtcclxuICByZWFkb25seSB1dWlkOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSB1cGRhdGVGdW5jczogVXBkYXRlRnVuY3Rpb25bXSA9IFtdO1xyXG5cclxuICB0YWc6IHN0cmluZztcclxuICBlbGVtZW50OiBUO1xyXG4gIGNoaWxkczogVGVtcGxhdGVbXTtcclxuICBwYXJlbnQ/OiBUZW1wbGF0ZTtcclxuXHJcbiAgLy9wcm9wZXJ0aWVzXHJcbiAgY2xhc3NMaXN0OiBDbGFzc0xpc3Q7XHJcbiAgc3R5bGU6IFN0eWxlO1xyXG4gIGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZXM7XHJcbiAgZXZlbnRzOiBFdmVudHM7XHJcbiAgaWQ6IElEO1xyXG4gIHNob3c6IFNob3c7XHJcbiAgLy9cclxuXHJcbiAgX25hbWUgPSBcIlRlbXBsYXRlXCI7XHJcblxyXG4gIHN0cnVjdD86IElEeW5hbWljVXBkYXRlU3RydWN0O1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBUKSB7XHJcbiAgICB0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB0aGlzLmNoaWxkcyA9IFtdO1xyXG5cclxuICAgIC8vYXR0cmlidXRlc1xyXG4gICAgdGhpcy5jbGFzc0xpc3QgPSBuZXcgQ2xhc3NMaXN0KHRoaXMpO1xyXG4gICAgdGhpcy5zdHlsZSA9IG5ldyBTdHlsZSh0aGlzKTtcclxuICAgIHRoaXMuYXR0cmlidXRlcyA9IG5ldyBBdHRyaWJ1dGVzKHRoaXMpO1xyXG4gICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRzKHRoaXMpO1xyXG4gICAgdGhpcy5pZCA9IG5ldyBJRCh0aGlzKTtcclxuICAgIHRoaXMuc2hvdyA9IG5ldyBTaG93KHRoaXMpO1xyXG5cclxuICAgIC8vIGdldCBhdHRyaWJ1dGVzIGZyb20gZWxlbWVudFxyXG4gICAgdGhpcy50YWcgPSBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgIHRoaXMuaWQuc2V0SWQoZWxlbWVudC5pZCk7XHJcblxyXG4gICAgVGVtcGxhdGUudGVtcGxhdGVzLnNldChlbGVtZW50LCB0aGlzKTtcclxuICB9XHJcblxyXG4gIGFwcGx5U3RydWN0KHN0cnVjdDogSUR5bmFtaWNVcGRhdGVTdHJ1Y3QpIHtcclxuICAgIHRoaXMuc3RydWN0ID0gc3RydWN0O1xyXG4gICAgaWYgKHN0cnVjdC5pZCkge1xyXG4gICAgICB0aGlzLmlkLmR5bmFtaWNJZChzdHJ1Y3QuaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzdHJ1Y3Quc3R5bGUpIHtcclxuICAgICAgdGhpcy5zdHlsZS5keW5hbWljU3R5bGUoc3RydWN0LnN0eWxlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3RydWN0LmF0dHJpYnV0ZXMpIHtcclxuICAgICAgdGhpcy5hdHRyaWJ1dGVzLmR5bmFtaWNBdHRyaWJ1dGVzKHN0cnVjdC5hdHRyaWJ1dGVzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3RydWN0LmV2ZW50cykge1xyXG4gICAgICB0aGlzLmV2ZW50cy5hZGRFdmVudHMoc3RydWN0LmV2ZW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHN0cnVjdC5pbm5lckhUTUwpIHtcclxuICAgICAgdGhpcy5keW5hbWljSW5uZXJIVE1MKHN0cnVjdC5pbm5lckhUTUwpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzdHJ1Y3QuY2hpbGRzKSB7XHJcbiAgICAgIHRoaXMuZHluYW1pY0NoaWxkcyhzdHJ1Y3QuY2hpbGRzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3RydWN0LndhdGNoU2F0ZXMpIHtcclxuICAgICAgdGhpcy5pbml0V2F0Y2hTdGF0ZXMoc3RydWN0LndhdGNoU2F0ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzdHJ1Y3QuY2xhc3NMaXN0KSB7XHJcbiAgICAgIHRoaXMuY2xhc3NMaXN0LmR5bmFtaWNDbGFzc0xpc3Qoc3RydWN0LmNsYXNzTGlzdCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHN0cnVjdC5jbGFzc05hbWUpIHtcclxuICAgICAgdGhpcy5jbGFzc0xpc3QuZHluYW1pY0NsYXNzTmFtZShzdHJ1Y3QuY2xhc3NOYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vaW5uZXJIVE1MXHJcbiAgc2V0SW5uZXJIVE1MKHRleHQ6IHN0cmluZykge1xyXG4gICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IHRleHQ7XHJcbiAgfVxyXG5cclxuICBkeW5hbWljSW5uZXJIVE1MKGRhdGE6IElEeW5hbWljU3RhdGljPHN0cmluZz4pIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXM7XHJcbiAgICBkeW5hbWljVmFsdWUoZGF0YSwgdGhpcywge1xyXG4gICAgICBkZWxldGVWYWx1ZSgpIHt9LFxyXG4gICAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRhcmdldC5zZXRJbm5lckhUTUwodmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRJbm5lckhUTUwoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmlubmVySFRNTDtcclxuICB9XHJcblxyXG4gIC8vQ2hpbGRzXHJcblxyXG4gIGFkZENoaWxkKGNoaWxkOiBJQ2hpbGRTdHJ1Y3QgfCBDb21wb25lbnQpIHtcclxuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIENvbXBvbmVudCkge1xyXG4gICAgICBhZGRDaGlsZCh0aGlzLCBjaGlsZC50ZW1wbGF0ZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGFkZENoaWxkKHRoaXMsIGNoaWxkKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUNoaWxkcygpIHtcclxuICAgIHdoaWxlICh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCkge1xyXG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jaGlsZHMgPSBbXTtcclxuICB9XHJcblxyXG4gIGR5bmFtaWNDaGlsZHMoZGF0YTogSUR5bmFtaWNTdGF0aWM8SUNoaWxkU3RydWN0W10+KSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzO1xyXG4gICAgZHluYW1pY1ZhbHVlKGRhdGEsIHRoaXMsIHtcclxuICAgICAgZGVsZXRlVmFsdWUodmFsdWUpIHtcclxuICAgICAgICB0YXJnZXQuZGVsZXRlQ2hpbGRzKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdmFsdWUuZm9yRWFjaCgoaXRlbTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICB0YXJnZXQuYWRkQ2hpbGQoaXRlbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vc3RhdGVcclxuICBpbml0V2F0Y2hTdGF0ZXMoc3RhdGVzOiBTdGF0ZTxhbnk+W10pIHtcclxuICAgIHN0YXRlcy5mb3JFYWNoKChzdGF0ZSkgPT4ge1xyXG4gICAgICBzdGF0ZS5vblVwZGF0ZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVGdW5jcy5mb3JFYWNoKChmdW5jKSA9PiBmdW5jLmNhbGwoKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvL3VwZGF0ZSBmdW5jdGlvbnNcclxuICBhZGRVcGRhdGVGdW5jKGZ1bmM6IFVwZGF0ZUZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLnVwZGF0ZUZ1bmNzLnB1c2goZnVuYyk7XHJcbiAgfVxyXG5cclxuICAvL2V2ZW50IG9uIGVsZW1lbnQgaXMgaW4gZG9tXHJcbiAgX2VsZW1lbkluRG9tKCkge1xyXG4gICAgaWYgKHRoaXMuc3RydWN0KSB7XHJcbiAgICAgIGlmICh0aGlzLnN0cnVjdC5zaG93ICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMuc2hvdy5keW5hbWljU2hvdyh0aGlzLnN0cnVjdC5zaG93KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5jaGlsZHMuZm9yRWFjaCgoY2hpbGQpID0+IGNoaWxkLl9lbGVtZW5JbkRvbSgpKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFVwZGF0ZUZ1bmN0aW9uIHtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY2FsbGJhY2s6IChwcmV2PzogYW55KSA9PiBhbnkpIHt9XHJcbiAgcHJldj86IGFueTtcclxuICBjYWxsKCkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jYWxsYmFjayh0aGlzLnByZXYpO1xyXG4gICAgdGhpcy5wcmV2ID0gcmVzdWx0O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi9UZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBJQ2hpbGRTdHJ1Y3QgfSBmcm9tIFwiLi4vdHlwZXMvSUNoaWxkU3RydWN0XCI7XHJcbmltcG9ydCB7IGFkZENoaWxkSFRNTCB9IGZyb20gXCIuL2h0bWxDaGlsZFwiO1xyXG5pbXBvcnQgeyBhZGRDaGlsZFN0cmluZyB9IGZyb20gXCIuL3N0cmluZ0NoaWxkXCI7XHJcbmltcG9ydCB7IGFkZENoaWxkVGVtcGxhdGVTdHJ1Y3QgfSBmcm9tIFwiLi9zdHJ1Y3RDaGlsZFwiO1xyXG5pbXBvcnQgeyBhZGRDaGlsZFRlbXBsYXRlIH0gZnJvbSBcIi4vdGVtcGxhdGVDaGlsZFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZENoaWxkKF90ZW1wbGF0ZTogVGVtcGxhdGUsIGNoaWxkOiBJQ2hpbGRTdHJ1Y3QpIHtcclxuICBsZXQgcmVzOiBhbnkgPSBudWxsO1xyXG4gIHJlcyA9IGFkZENoaWxkSFRNTChfdGVtcGxhdGUsIHJlcywgY2hpbGQpO1xyXG4gIHJlcyA9IGFkZENoaWxkU3RyaW5nKF90ZW1wbGF0ZSwgcmVzLCBjaGlsZCk7XHJcbiAgcmVzID0gYWRkQ2hpbGRUZW1wbGF0ZShfdGVtcGxhdGUsIHJlcywgY2hpbGQpO1xyXG4gIHJlcyA9IGFkZENoaWxkVGVtcGxhdGVTdHJ1Y3QoX3RlbXBsYXRlLCByZXMsIGNoaWxkKTtcclxufVxyXG4iLCJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi9UZW1wbGF0ZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZENoaWxkSFRNTChfdGVtcGxhdGU6IFRlbXBsYXRlLCByZXM6IGFueSwgY2hpbGQ6IGFueSkge1xyXG4gIGlmIChyZXMgIT0gbnVsbCkgcmV0dXJuIHJlcztcclxuICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkgcmV0dXJuIHJlcztcclxuXHJcbiAgY29uc3QgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoY2hpbGQpO1xyXG4gIF90ZW1wbGF0ZS5jaGlsZHMucHVzaCh0ZW1wbGF0ZSk7XHJcbiAgX3RlbXBsYXRlLmVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG4iLCJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi9UZW1wbGF0ZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZENoaWxkU3RyaW5nKF90ZW1wbGF0ZTogVGVtcGxhdGUsIHJlczogYW55LCBjaGlsZDogYW55KSB7XHJcbiAgaWYgKHJlcyAhPSBudWxsKSByZXR1cm4gcmVzO1xyXG4gIGlmICh0eXBlb2YgY2hpbGQgIT0gXCJzdHJpbmdcIikgcmV0dXJuIHJlcztcclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuIiwiaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tIFwiLi4vVGVtcGxhdGVcIjtcclxuaW1wb3J0IHsgSUR5bmFtaWNTdHJ1Y3QgfSBmcm9tIFwiLi4vdHlwZXMvSUR5bmFtaWNTdHJ1Y3RcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRDaGlsZFRlbXBsYXRlU3RydWN0KFxyXG4gIF90ZW1wbGF0ZTogVGVtcGxhdGUsXHJcbiAgcmVzOiBhbnksXHJcbiAgY2hpbGQ6IGFueVxyXG4pIHtcclxuICBpZiAocmVzICE9IG51bGwpIHJldHVybiByZXM7XHJcblxyXG4gIGlmICh0eXBlb2YgY2hpbGQgIT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcclxuICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUZW1wbGF0ZSkgcmV0dXJuIHJlcztcclxuXHJcbiAgY29uc3Qgc3RydWN0ID0gY2hpbGQgYXMgSUR5bmFtaWNTdHJ1Y3Q7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoc3RydWN0LnRhZyk7XHJcbiAgY29uc3QgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoZWxlbWVudCk7XHJcblxyXG4gIHRlbXBsYXRlLnBhcmVudCA9IF90ZW1wbGF0ZTtcclxuICBfdGVtcGxhdGUuZWxlbWVudC5hcHBlbmRDaGlsZCh0ZW1wbGF0ZS5lbGVtZW50KTtcclxuICBfdGVtcGxhdGUuY2hpbGRzLnB1c2godGVtcGxhdGUpO1xyXG5cclxuICB0ZW1wbGF0ZS5hcHBseVN0cnVjdChzdHJ1Y3QpO1xyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG4iLCJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi9UZW1wbGF0ZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZENoaWxkVGVtcGxhdGUoX3RlbXBsYXRlOiBUZW1wbGF0ZSwgcmVzOiBhbnksIGNoaWxkOiBhbnkpIHtcclxuICBpZiAocmVzICE9IG51bGwpIHJldHVybiByZXM7XHJcblxyXG4gIGlmICghKGNoaWxkIGluc3RhbmNlb2YgVGVtcGxhdGUpKSByZXR1cm4gcmVzO1xyXG5cclxuICBjaGlsZC5wYXJlbnQgPSBfdGVtcGxhdGU7XHJcbiAgX3RlbXBsYXRlLmNoaWxkcy5wdXNoKGNoaWxkKTtcclxuICBfdGVtcGxhdGUuZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZC5lbGVtZW50KTtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG4iLCJpbXBvcnQgeyBTdGF0ZSB9IGZyb20gXCIuLi8uLi9TdGF0ZVwiO1xyXG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi9UZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBJRHluYW1pY1N0YXRpYyB9IGZyb20gXCIuLi90eXBlcy9JRHluYW1pY1N0YXRpY1wiO1xyXG5pbXBvcnQgeyBJRHluYW1pY1N0YXRpY09iamVjdCB9IGZyb20gXCIuLi90eXBlcy9JRHluYW1pY1N0YXRpY09iamVjdFwiO1xyXG5pbXBvcnQgeyBkeW5hbWljVmFsdWUgfSBmcm9tIFwiLi9keW5hbWljVmFsdWVcIjtcclxuaW1wb3J0IHsgSVVwZGF0ZU9iamVjdEZ1bmNzIH0gZnJvbSBcIi4vSVVwZGF0ZU9iamVjdEZ1bmNzXCI7XHJcbmltcG9ydCB7IElVcGRhdGVWYWx1ZUZ1bmNzIH0gZnJvbSBcIi4vSVVwZGF0ZVZhbHVlRnVuY3NcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkeW5hbWljT2JqZWN0ID0gPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihcclxuICB0ZW1wbGF0ZTogVGVtcGxhdGUsXHJcbiAgZGF0YTogSUR5bmFtaWNTdGF0aWNPYmplY3Q8VD4sXHJcbiAgZnVuY3M6IElVcGRhdGVWYWx1ZUZ1bmNzICYgSVVwZGF0ZU9iamVjdEZ1bmNzXHJcbikgPT4ge1xyXG4gIGR5bmFtaWNWYWx1ZShcclxuICAgIGRhdGEgYXMgSUR5bmFtaWNTdGF0aWM8YW55PixcclxuICAgIHRlbXBsYXRlLFxyXG4gICAgZnVuY3MgYXMgSVVwZGF0ZVZhbHVlRnVuY3NcclxuICApO1xyXG5cclxuICBpZiAodHlwZW9mIGRhdGEgIT0gXCJvYmplY3RcIiB8fCBkYXRhIGluc3RhbmNlb2YgU3RhdGUgfHwgQXJyYXkuaXNBcnJheShkYXRhKSlcclxuICAgIHJldHVybjtcclxuXHJcbiAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICBkeW5hbWljVmFsdWUoZGF0YVtrZXkgYXMga2V5b2YgVF0sIHRlbXBsYXRlLCB7XHJcbiAgICAgIGRlbGV0ZVZhbHVlOiAodmFsdWU6IGFueSkgPT4gZnVuY3MuZGVsZXRlS2V5KGtleSwgdmFsdWUpLFxyXG4gICAgICBzZXRWYWx1ZTogKHZhbHVlOiBhbnkpID0+IGZ1bmNzLnNldEtleShrZXksIHZhbHVlKSxcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBTdGF0ZSB9IGZyb20gXCIuLi8uLi9TdGF0ZVwiO1xyXG5pbXBvcnQgeyBlcXVhbCB9IGZyb20gXCIuLi8uLi91dGlscy9lcXVhbFwiO1xyXG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuLi9UZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBJRHluYW1pY1N0YXRpYyB9IGZyb20gXCIuLi90eXBlcy9JRHluYW1pY1N0YXRpY1wiO1xyXG5pbXBvcnQgeyBVcGRhdGVGdW5jdGlvbiB9IGZyb20gXCIuLi9VcGRhdGVGdW5jdGlvblwiO1xyXG5pbXBvcnQgeyBJVXBkYXRlVmFsdWVGdW5jcyB9IGZyb20gXCIuL0lVcGRhdGVWYWx1ZUZ1bmNzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZHluYW1pY1ZhbHVlID0gKFxyXG4gIGRhdGE6IElEeW5hbWljU3RhdGljPGFueT4sXHJcbiAgdGVtcGxhdGU6IFRlbXBsYXRlLFxyXG4gIHsgZGVsZXRlVmFsdWUsIHNldFZhbHVlIH06IElVcGRhdGVWYWx1ZUZ1bmNzXHJcbikgPT4ge1xyXG4gIGlmICh0eXBlb2YgZGF0YSA9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgIGNvbnN0IGZ1bmMgPSBuZXcgVXBkYXRlRnVuY3Rpb24oKHByZXYpID0+IHtcclxuICAgICAgY29uc3QgdmFsdWUgPSBkYXRhKCk7XHJcbiAgICAgIGlmIChlcXVhbChwcmV2LCB2YWx1ZSkpIHJldHVybiB2YWx1ZTtcclxuICAgICAgaWYgKHByZXYpIGRlbGV0ZVZhbHVlKHByZXYpO1xyXG4gICAgICBzZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgZnVuYy5jYWxsKCk7XHJcbiAgICB0ZW1wbGF0ZS5hZGRVcGRhdGVGdW5jKGZ1bmMpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBTdGF0ZSkge1xyXG4gICAgc2V0VmFsdWUoZGF0YS5nZXRTdHJpbmcoKSk7XHJcblxyXG4gICAgZGF0YS5vblVwZGF0ZSgoblZhbHVlLCBwcmV2KSA9PiB7XHJcbiAgICAgIGlmIChwcmV2KSBkZWxldGVWYWx1ZShwcmV2KTtcclxuICAgICAgaWYgKGRhdGEucHJlZml4KSB7XHJcbiAgICAgICAgc2V0VmFsdWUoZGF0YS5wcmVmaXgoblZhbHVlKSk7XHJcbiAgICAgIH1cclxuICAgICAgc2V0VmFsdWUoblZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKGRhdGEpO1xyXG59O1xyXG4iLCJleHBvcnQgeyBTdGF0ZSB9IGZyb20gXCIuL1N0YXRlXCI7XHJcbmV4cG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4vVGVtcGxhdGUvVGVtcGxhdGVcIjtcclxuZXhwb3J0IHsgQ3NzIH0gZnJvbSBcIi4vQ3NzL0Nzc1wiO1xyXG4iLCJleHBvcnQgZnVuY3Rpb24gZXF1YWwoYTogYW55LCBiOiBhbnkpIHtcclxuICBpZiAodHlwZW9mIGEgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGIgPT09IFwib2JqZWN0XCIpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhKSA9PT0gSlNPTi5zdHJpbmdpZnkoYik7XHJcbiAgfVxyXG4gIHJldHVybiBhID09IGI7XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVVVJRCgpIHtcclxuICAvLyBQdWJsaWMgRG9tYWluL01JVFxyXG4gIGxldCBkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7IC8vVGltZXN0YW1wXHJcbiAgbGV0IGQyID1cclxuICAgICh0eXBlb2YgcGVyZm9ybWFuY2UgIT09IFwidW5kZWZpbmVkXCIgJiZcclxuICAgICAgcGVyZm9ybWFuY2Uubm93ICYmXHJcbiAgICAgIHBlcmZvcm1hbmNlLm5vdygpICogMTAwMCkgfHxcclxuICAgIDA7IC8vVGltZSBpbiBtaWNyb3NlY29uZHMgc2luY2UgcGFnZS1sb2FkIG9yIDAgaWYgdW5zdXBwb3J0ZWRcclxuICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICBsZXQgciA9IE1hdGgucmFuZG9tKCkgKiAxNjsgLy9yYW5kb20gbnVtYmVyIGJldHdlZW4gMCBhbmQgMTZcclxuICAgIGlmIChkID4gMCkge1xyXG4gICAgICAvL1VzZSB0aW1lc3RhbXAgdW50aWwgZGVwbGV0ZWRcclxuICAgICAgciA9IChkICsgcikgJSAxNiB8IDA7XHJcbiAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvL1VzZSBtaWNyb3NlY29uZHMgc2luY2UgcGFnZS1sb2FkIGlmIHN1cHBvcnRlZFxyXG4gICAgICByID0gKGQyICsgcikgJSAxNiB8IDA7XHJcbiAgICAgIGQyID0gTWF0aC5mbG9vcihkMiAvIDE2KTtcclxuICAgIH1cclxuICAgIHJldHVybiAoYyA9PT0gXCJ4XCIgPyByIDogKHIgJiAweDMpIHwgMHg4KS50b1N0cmluZygxNik7XHJcbiAgfSk7XHJcbn1cclxuIiwiZXhwb3J0IHsgVGVtcGxhdGUsIFN0YXRlIH0gZnJvbSBcIi4vY29yZVwiO1xyXG5leHBvcnQgeyBUZW1wbGF0ZUZ1bmN0aW9uIGFzIHQgfSBmcm9tIFwiLi9UZW1wbGF0ZUZ1bmMvVGVtcGxhdGVGdW5jXCI7XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7IiwiaW1wb3J0IHsgdCB9IGZyb20gXCJ0ZW1wbGF0ZS1lbmdpbmVcIjtcclxuaW1wb3J0IFJlbmRlcldhc20gZnJvbSBcImFzc2VtYmx5L3JlbmRlclwiO1xyXG50KFwiI3Jvb3RcIiwgW1xyXG4gIHtcclxuICAgIHRhZzogXCJkaXZcIixcclxuICAgIGNsYXNzTmFtZTogXCJjb250YWluZXJcIixcclxuICB9LFxyXG5dKTtcclxuXHJcblByb21pc2UuYWxsKFtcclxuICBSZW5kZXJXYXNtLmxvYWQoe1xyXG4gICAganNfZHJhdzogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgY29uc29sZS5sb2coZGF0YSwgXCJob2xhXCIpO1xyXG4gICAgfSxcclxuICB9KSxcclxuXSkudGhlbigoKSA9PiB7XHJcbiAgUmVuZGVyV2FzbS5jYWxsV2FzbShcInNldF9tZW1cIiwgMCwgMCwgMTEpO1xyXG4gIFJlbmRlcldhc20uY2FsbFdhc20oXCJzZXRfbWVtXCIsIDAsIDksIDExKTtcclxuICBSZW5kZXJXYXNtLmNhbGxXYXNtKFwic2V0X21lbVwiLCAxLCAwLCAyMik7XHJcbiAgUmVuZGVyV2FzbS5jYWxsV2FzbShcInNldF9tZW1cIiwgMSwgOSwgMjIpO1xyXG4gIFJlbmRlcldhc20uY2FsbFdhc20oXCJzZXRfbWVtXCIsIDIsIDAsIDMzKTtcclxuICBSZW5kZXJXYXNtLmNhbGxXYXNtKFwic2V0X21lbVwiLCAyLCAxOSwgMzMpO1xyXG4gIFJlbmRlcldhc20uY2FsbFdhc20oXCJyZXNpemVfbWVtXCIsIDAsIDIwKTtcclxuICBSZW5kZXJXYXNtLmNhbGxXYXNtKFwibWVtQnVmZmVyUG9pbnRlclwiKTtcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJ3YXNtIiwiV2FzbSIsInNldEZpbGUiLCJMb2FkZXJXYXNtIiwic3RhdGljIiwibmFtZSIsImRhdGEiLCJ0aGlzIiwiZXhwb3J0cyIsImJ1ZmZlcnMiLCJmaWxlUGF0aCIsImZpbGVzUGF0aCIsInJlc3BvbnNlIiwiZmV0Y2giLCJidWZmZXIiLCJhcnJheUJ1ZmZlciIsImxvYWRGcm9tQnVmZmVyIiwidW5kZWZpbmVkIiwiZW52IiwiaGVhcCIsImdldERlZmF1bHRFbnYiLCJpbnN0YW5jZSIsIldlYkFzc2VtYmx5IiwiaW5zdGFudGlhdGUiLCJVaW50OEFycmF5IiwibW9kdWxlIiwiaGVhcFJlZ2lzdGVyIiwibWVtb3J5IiwiTWVtb3J5IiwiaW5pdGlhbCIsIkxPRyIsImNvbnNvbGUiLCJsb2ciLCJqb2luIiwiZW1zY3JpcHRlbl9yZXNpemVfaGVhcCIsInJlcXVlc3RlZFNpemUiLCJlbXNjcmlwdGVuX21lbWNweV9iaWciLCJEWU5BTUlDVE9QX1BUUiIsImFib3J0IiwiZXJyIiwiRXJyb3IiLCJhYm9ydE9uQ2Fubm90R3Jvd01lbW9yeSIsIl9fX2N4YV90aHJvdyIsInB0ciIsInR5cGUiLCJkZXN0cnVjdG9yIiwiZXJyb3IiLCJfX19jeGFfYWxsb2NhdGVfZXhjZXB0aW9uIiwic2l6ZSIsIl9fX3NldEVyck5vIiwiX2Vtc2NyaXB0ZW5fZ2V0X2hlYXBfc2l6ZSIsImxlbmd0aCIsIl9lbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwIiwiX2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZyIsImRlc3QiLCJzcmMiLCJjb3VudCIsInNldCIsInN1YmFycmF5IiwiX1puYW0iLCJfX21lbW9yeV9iYXNlIiwiX190YWJsZV9iYXNlIiwidGFibGUiLCJUYWJsZSIsIm1heGltdW0iLCJlbGVtZW50IiwiZW52Q29uZmlnIiwiZGVmYXVsdENvbmZpZyIsImNvbnN0cnVjdG9yIiwiZmlsZXBhdGgiLCJsb2FkIiwiZ2V0RXhwb3J0cyIsImxvYWRGaWxlIiwiY2FsbFdhc20iLCJtZXRob2ROYW1lIiwiYXJncyIsIm1ldGhvZCIsIndhc21BcmdzIiwiV2FzbUFyZ3MiLCJiaW5kIiwiZ2V0QXJncyIsInJlZ2lzdGVyRmlsZSIsInJlZ2lzdGVyQnVmZmVyIiwiYXJnc0luZm8iLCJvdXRCdWZmZXJzIiwiZ2V0Q2xhc3NCdWZmZXIiLCJVaW50OENsYW1wZWRBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIm1hcCIsImFyZyIsImkiLCJjbGFzc0J1ZmZlciIsInBvaW50ZXIiLCJCWVRFU19QRVJfRUxFTUVOVCIsInB1c2giLCJvdXQiLCJieXRlT2Zmc2V0IiwiZ2V0T3V0QnVmZmVycyIsImFyZ0EiLCJhcmdCIiwiYXJnQyIsInJlcyIsImZ1bmNTdHJpbmciLCJmdW5jSFRNTCIsImZ1bmNUZW1wbGF0ZSIsImZ1bmNTdHJ1Y3QiLCJIVE1MRWxlbWVudCIsIlRlbXBsYXRlIiwidGVtcGxhdGVzIiwiaGFzIiwiVGVtcGxhdGVGdW5jdGlvbiIsImdldCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInRhZyIsInRlbXBsYXRlIiwiYXBwbHlTdHJ1Y3QiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwiY2hpbGQiLCJhZGRDaGlsZCIsInN0YXJ0c1dpdGgiLCJjb21wb25lbnRNYXRjaCIsIm1hdGNoIiwiY29tcG9uZW50TmFtZSIsInJlcGxhY2UiLCJpZCIsImdlbmVyYXRlVVVJRCIsImNzcyIsIkNzcyIsInN0eWxlIiwic3RydWN0Iiwic2V0U3R5bGVTdHJ1Y3QiLCJ1c2UiLCJjb21wb25lbnQiLCJDb21wb25lbnQiLCJzZXRDb21wb25lbnRJZCIsImZ1bmNDb21wb25lbnQiLCJzZWxlY3RvciIsIl9yZXMiLCJzdHJpbmdCb2R5Iiwic3RyaW5nSGVhZCIsInN0cmluZ0lkIiwic3RyaW5nUXVlcnkiLCJzdHJpbmdDbGFzcyIsInN0cmluZ1F1ZXJ5QWxsIiwic3RyaW5nVGFnIiwic3RyaW5nQXR0cmlidXRlcyIsInRlc3QiLCJtYWN0aEF0dHJpYnV0ZSIsInRleHQiLCJyZWdleCIsIm1hY3RoIiwiYXR0cmlidXJlc01hY3RoIiwiZXZlbnRzTWFjdGgiLCJhdHRyaSIsInNldElkIiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiYWRkQ2xhc3NMaXN0Iiwic3BsaXQiLCJpbm5lckhUTUwiLCJzZXRJbm5lckhUTUwiLCJldmVudHMiLCJpdGVtIiwiaWR4IiwiYWRkRXZlbnQiLCJib2R5IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImZyb20iLCJfZWxlbWVudCIsImhlYWQiLCJnZXRFbGVtZW50QnlJZCIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwidHJpbSIsInV1aWQiLCJjb21wb25lbnRJZCIsImdldEZyb21QYXRoIiwicGF0aCIsImZpbHRlciIsIngiLCJfIiwidmFsdWUiLCJwb3AiLCJjcmVhdGVTdHlsZSIsImN1cnJlbnQiLCJzdGF0ZXNLZXlzIiwicHJvY2Vzc1N0eWxlS2V5Iiwic3Vic3RyaW5nIiwiZ2V0U3RyaW5nIiwid2F0Y2hTYXRlcyIsImR5bmFtaWNUZW1wbGF0ZSIsImNoaWxkcyIsInN0YXRla2V5IiwiZHluYW1pY1N0eWxlIiwiY29tcG9uZW50SW5mbyIsImdldFN0eWxlSW5mbyIsImFkZENsYXNzTmFtZSIsImdldElubmVySFRNTCIsInN0YXRpY1N0eWxlcyIsImNvbnRleHQiLCJjbGFzc05hbWVQYXRoIiwic3RydWN0S2V5cyIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJTdGF0ZSIsImluZGV4T2YiLCJzdWJDb250ZXh0IiwiZ2V0U3RhdGVzQW5kU3R5bGUiLCJzdWJTdHJ1Y3QiLCJhdXgiLCJzdWJQYXRoIiwicmVwbGFjZVZhbHVlIiwidG9Mb3dlckNhc2UiLCJfdmFsdWUiLCJfbmFtZSIsInVwZGF0ZUNhbGxiYWNrcyIsIm9uVXBkYXRlIiwiY2FsbGJhY2siLCJzZXRQcmVmaXhTdHJpbmciLCJmdW5jIiwicHJlZml4IiwiZXF1YWwiLCJwcmV2IiwiQXR0cmlidXRlcyIsIkJhc2VDbGFzcyIsInNldEF0dHJpYnV0ZSIsImRlbGV0ZUF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZXMiLCJkZWxldGVBdHRyaWJ1dGVzIiwiZHluYW1pY0F0dHJpYnV0ZXMiLCJ0YXJnZXQiLCJkeW5hbWljT2JqZWN0Iiwic2V0S2V5Iiwic2V0VmFsdWUiLCJkZWxldGVLZXkiLCJkZWxldGVWYWx1ZSIsIkNsYXNzTGlzdCIsIlNldCIsInRvZ2dsZUNsYXNzTmFtZSIsImRlbGV0ZSIsImFkZCIsInRvZ2dsZSIsInJlbW92ZUNsYXNzTmFtZSIsInJlbW92ZSIsImR5bmFtaWNDbGFzc05hbWUiLCJkeW5hbWljVmFsdWUiLCJuYW1lcyIsInJlbW92ZUNsYXNzTGlzdCIsImR5bmFtaWNDbGFzc0xpc3QiLCJFdmVudHMiLCJldmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudHMiLCJJRCIsImR5bmFtaWNJZCIsIlNob3ciLCJzZXRTaG93Iiwic2hvdyIsInBhcmVudCIsImFwcGVuZENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJkeW5hbWljU2hvdyIsIlN0eWxlIiwicmVtb3ZlU3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFN0eWxlIiwic2V0UHJvcGVydHkiLCJyZW1vdmVTdHlsZXMiLCJzZXRTdHlsZXMiLCJ1cGRhdGVGdW5jcyIsImF0dHJpYnV0ZXMiLCJ0YWdOYW1lIiwiZHluYW1pY0lubmVySFRNTCIsImR5bmFtaWNDaGlsZHMiLCJpbml0V2F0Y2hTdGF0ZXMiLCJkZWxldGVDaGlsZHMiLCJmaXJzdENoaWxkIiwic3RhdGVzIiwic3RhdGUiLCJjYWxsIiwiYWRkVXBkYXRlRnVuYyIsIl9lbGVtZW5JbkRvbSIsIk1hcCIsInJlc3VsdCIsIl90ZW1wbGF0ZSIsImFkZENoaWxkSFRNTCIsImFkZENoaWxkU3RyaW5nIiwiYWRkQ2hpbGRUZW1wbGF0ZSIsImFkZENoaWxkVGVtcGxhdGVTdHJ1Y3QiLCJmdW5jcyIsIlVwZGF0ZUZ1bmN0aW9uIiwiblZhbHVlIiwiYSIsImIiLCJKU09OIiwic3RyaW5naWZ5IiwiZCIsIkRhdGUiLCJnZXRUaW1lIiwiZDIiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImMiLCJyIiwiTWF0aCIsInJhbmRvbSIsImZsb29yIiwidG9TdHJpbmciLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInAiLCJ0IiwiUHJvbWlzZSIsImFsbCIsImpzX2RyYXciLCJ0aGVuIl0sInNvdXJjZVJvb3QiOiIifQ==